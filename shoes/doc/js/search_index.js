var search_data = {"index":{"searchIndex":["accordion","array","bignum","binject","dmg","exe","bloops","sound","track","book","building","cp","bb","body","joint","groove","pin","pivot","slide","shape","circle","poly","segment","space","vec2","calc","chipmunk","class","collisions","comic","customrendertest","simplerender","database","date","datetime","encoding","enumerable","exception","ftsearch","analysis","analyzer","simpleidentifieranalyzer","whitespaceanalyzer","documentmapreader","documentmapwriter","fieldinfos","fragmentwriter","fulltextreader","fulltextwriter","inmemorywriter","suffixarrayreader","hit","lazyhits","suffixarraywriter","falseclass","field","bomb","cell","emptycell","opencell","file","fixnum","float","gem","gem::ext::extconfbuilder","shoesface","progressreporter","silentdownloadreporter","guidance","htmlrendertest","hash","homebrew","hpricot","blankslate","bogusetag","trav","builder","cdata","trav","comment","trav","container","trav","context","cssproxy","doc","trav","doctype","trav","etag","elem","trav","elements","encodingerror","error","leaf","trav","name","node","parseerror","procins","trav","tag","text","trav","traverse","xhtmlstrict","xhtmltransitional","xmldecl","trav","json","circulardatastructure","ext","generator","generatormethods","array","falseclass","float","hash","integer","nilclass","object","string","extend","trueclass","state","parser","generatorerror","jsonerror","missingunicodesupport","nestingerror","parsererror","unparsererror","kernel","life","make","makedarwin","makelinux","makemingw","markdowntest","menupanel","mimickirb","continue","empty","module","nilclass","notsupportedbyshoes","numeric","object","opp","othello","game","player","override","pathologicalinputstest","proc","range","redcarpet","markdown","render","base","html","html_toc","manpage","smartyhtml","smartypants","xhtml","regexp","sqlite3","abortexception","authorizationexception","blob","busyexception","cantopenexception","constants","columntype","errorcode","textrep","constraintexception","corruptexception","database","functionproxy","emptyexception","exception","formatexception","fullexception","ioexception","internalexception","interruptexception","lockedexception","memoryexception","mismatchexception","misuseexception","notadatabaseexception","notfoundexception","permissionexception","pragmas","protocolexception","rangeexception","readonlyexception","resultset","arraywithtypes","arraywithtypesandfields","hashwithtypes","sqlexception","schemachangedexception","statement","toobigexception","translator","unsupportedexception","value","version","shell","shellcommandrunner","shoes","animation","app","background","banner","basic","border","button","canvas","caption","check","code","color","del","dialog","download","response","editbox","editline","effect","em","every","flow","image","imageerror","ins","inscription","invalidmodeerror","link","linkhover","linkurl","listbox","logwindow","manual","mask","mouse","native","notimplementederror","pack","para","pattern","progress","radio","search","settingup","setup","shape","slider","span","stack","strong","sub","subtitle","sup","tagline","text","textblock","timer","timerbase","title","types","app","widget","video","videoerror","widget","window","shy","smartypantstest","string","struct","symbol","tank","time","trueclass","%()","%()","*()","+()","-()","-@()","/()","/()","/()","/()","<<()","hpricot()","json()","xml()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","__hdr__()","a=()","activate_gem()","active?()","add_body()","add_child()","add_class()","add_collision_func()","add_custom_formulas()","add_custom_remote()","add_document()","add_document()","add_document()","add_document()","add_field()","add_field()","add_joint()","add_next_link()","add_shape()","add_shell()","add_static_shape()","add_suffixes()","add_todo()","add_translator()","after()","after()","aim()","alert()","all_found?()","allow_nan?()","answer()","append()","append_suffixes()","append_suffixes()","apply_force()","apply_impulse()","array_nl()","array_nl=()","as()","ask()","ask_yes_no()","at()","at()","attr()","author()","authorizer()","authorizer=()","auto_vacuum()","auto_vacuum=()","b()","b=()","bb()","before()","before()","bias_coef()","bias_coef=()","bind_param()","bind_parameter_count()","bind_params()","block_code()","board_at()","body()","body=()","bogusetag?()","bombs_left()","brew_installed?()","build()","build()","bundler()","busy_handler()","busy_timeout()","busy_timeout=()","c()","cache_bb()","cache_size()","cache_size=()","calculate_current_winner()","cc()","changes()","check_cache_for()","check_circular?()","check_direction()","checkout_formula()","children_of_type()","chmod_file()","clamp_vect()","class_tree()","classes()","clean_path()","clear()","click!()","clock_hand()","close()","close()","close()","closed?()","closed?()","closed?()","code()","code()","codespan()","collide_and_stop()","collision_slop()","collision_slop=()","collision_type()","collision_type=()","color_page()","column_count()","column_decltype()","column_name()","columns()","columns()","comment?()","commit()","common_build()","complete?()","complete_todo()","concat()","configure()","containers()","contains?()","context()","copy_deps_to_dist()","copy_deps_to_dist()","copy_deps_to_dist()","copy_ext()","copy_ext()","copy_ext()","copy_files()","copy_files_to_dist()","count()","count_hits()","cp_line()","cp_move()","cp_oval()","cp_space()","create_aggregate()","create_aggregate_handler()","create_function()","cross()","css_path()","css_path()","current_player()","custom_formulas()","czf()","damped_spring()","damping()","damping=()","data()","data_path()","database_list()","database_name()","dead?()","default_cache_size()","default_cache_size=()","default_synchronous()","default_synchronous=()","default_temp_store()","default_temp_store=()","define_aggregator()","define_function()","dewikify()","dewikify_code()","dewikify_hi()","dewikify_p()","dmg()","doc?()","doctype()","doctype?()","document_id()","document_id_to_uri()","document_uri()","documents()","done()","done()","done?()","dot()","double_emphasis()","download_reporter()","draw()","draw()","draw()","draw_background()","draw_board()","draw_opp_box()","draw_opp_oval()","draw_opp_plane()","draw_opp_rect()","draw_player_1()","draw_player_2()","du()","dump()","dump_data()","dump_data()","dump_data()","e()","e=()","each()","each()","each()","each_child()","each_child_with_index()","each_hyperlink()","each_hyperlink_uri()","each_uri()","east()","elastic_iterations()","elastic_iterations=()","elem?()","emphasis()","emphasis()","empty()","enable_load_extension()","encoding()","env()","eof?()","errcode()","errmsg()","error()","exe()","execute()","execute()","execute!()","execute2()","execute_batch()","expand()","expand()","extended()","f=()","fast_generate()","fast_xs()","fetch()","field_id()","field_id()","field_info()","field_size()","fields()","filter()","filter()","filter()","filter()","finalize()","finalize()","find_all()","find_all()","find_and_copy()","find_element()","find_first()","find_next()","find_piece()","find_suffixes()","finish!()","finish!()","finish!()","finish!()","finish!()","fire()","flag!()","following()","following_siblings()","foreign_key_list()","forget()","forget_todo()","from_state()","full_column_names()","full_column_names=()","game_over?()","gem()","gem_reset()","generate()","get_attribute()","get_data()","get_dylibs()","get_element_by_id()","get_elements_by_tag_name()","get_first_row()","get_first_value()","get_subnode()","git_fetch()","git_remote_add()","git_remote_rm()","git_repo_has_remote?()","gravity()","gravity=()","group()","group=()","grow()","guidance_system()","has_attribute?()","head()","header()","hide()","hpricot_slate_method_added()","hpricot_slate_method_added()","hrun()","html()","html()","html=()","html_equal()","html_tag()","hurt()","i=()","incident()","included()","indent()","indent=()","index()","index()","index_info()","index_list()","index_page()","inherited()","init()","initialize_in_memory_buffer()","inject()","inject_dir()","inject_file()","innerhtml()","innerhtml()","innerhtml=()","innerhtml=()","innertext()","inner_html()","inner_html()","inner_html=()","inner_html=()","inner_text()","inner_text()","insert_after()","insert_before()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","install()","install_packages()","install_sources()","installed?()","integrity_check()","interrupt()","intersect?()","intersects?()","items()","iterations()","iterations=()","j()","jj()","json_creatable?()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","keep_in_frame()","l()","l=()","last_insert_row_id()","latest_image()","launchable()","lay_initial_pieces()","lay_piece()","layers()","layers=()","lazyhits_to_offsets()","left_top_corner_of_piece()","length()","length()","lengthsq()","libversion()","linebreak()","link()","link()","linux()","list()","list_item()","load()","load()","load()","load_docs()","load_extension()","load_list()","load_note()","local2world()","m=()","make()","make()","make__()","make_app()","make_app()","make_app()","make_html()","make_inspect()","make_installer()","make_installer()","make_installer()","make_resource()","make_so()","make_so()","make_so()","make_stub()","manual_search()","max_nesting()","max_nesting=()","md5sum()","memorize_board()","merge()","merge()","merge()","merge()","meta()","method_added()","method_added()","method_missing()","method_missing()","moment_for_circle()","moment_for_poly()","near?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_board()","new_game()","new_game()","new_position()","next()","next()","next_in_direction()","next_node()","next_player()","next_sibling()","next_turn()","no_steps?()","node_position()","nodes_at()","normal_text()","normalize()","normalize!()","north()","not()","notify_cache_of()","null?()","num_documents()","object_nl()","object_nl=()","offsets_to_field_infos()","open()","open_link()","open_methods()","open_page()","open_section()","opp_piece()","p()","p=()","page()","paint()","paragraph()","parse()","parse()","parse()","parse!()","parser_trace()","parser_trace=()","path()","perp()","piece()","pkg()","play()","position()","possible_move?()","postprocess()","preceding()","preceding_siblings()","prepare()","prepend()","press_clear()","press_equals()","pretty_generate()","previous()","previous_node()","previous_sibling()","procins?()","progress()","progress()","progress_reporter()","project()","project()","query()","quote()","r()","r=()","rand()","random_amount()","random_direction()","random_position()","rank_offsets()","rank_offsets_probabilistic()","read_input()","recurse_proc()","refresh()","refresh_todo()","rehash_static()","remember()","remove()","remove_attr()","remove_attribute()","remove_body()","remove_class()","remove_collision_func()","remove_custom_formulas()","remove_custom_remote()","remove_joint()","remove_shape()","remove_static_shape()","render()","render()","render_bomb()","render_cell()","render_field()","render_flag()","render_number()","render_with()","render_with()","replace_child()","reset()","reset()","reset!()","reset_forces()","reset_id_counter()","resize_active_hash()","resize_static_hash()","restore()","reveal!()","rewrite()","rewrite()","right_bottom_corner_of_piece()","rollback()","root()","rot()","rotate()","run()","run()","run_code()","sample_page()","save()","save()","save()","say()","scan()","schema_cookie()","schema_cookie=()","search()","search()","seen?()","set()","set()","set_attribute()","set_default_collision_func()","set_destination()","set_error()","setup()","setup()","setup()","setup()","setup()","setup()","setup_app()","setup_system_resources()","setup_system_resources()","setup_system_resources()","sh()","sh()","shape_point_query()","show_search()","siblings_at()","size()","skel_replace()","skip_turn?()","slide_anim()","slide_in()","slide_out()","sound()","sound()","source()","source()","south()","space()","space=()","space_before()","space_before=()","start()","static_shape_point_query()","step()","step()","step()","step()","stop_anim()","stopped?()","suffix_index_to_offset()","surface_v()","surface_v=()","svn()","swap()","synchronous()","synchronous=()","t()","t=()","t=()","table_info()","table_of_contents()","tag!()","tank()","temp_store()","temp_store=()","tempo()","tempo=()","test()","test_autolinking_with_ent_chars()","test_block_quotes_preceded_by_spaces()","test_filter_html_doesnt_break_two_space_hard_break()","test_headings_with_trailing_space()","test_infinite_loop_in_header()","test_link_syntax_is_not_processed_within_code_blocks()","test_memory_leak_when_parsing_char_links()","test_para_before_block_html_should_not_wrap_in_p_tag()","test_pathological_1()","test_pathological_2()","test_pathological_3()","test_pathological_4()","test_should_return_string_in_same_encoding_as_input()","test_simple_inline_html()","test_simple_overload()","test_spaced_headers()","test_strikethrough_flag_works()","test_that_autolink_flag_works()","test_that_fenced_flag_works()","test_that_filter_html_works()","test_that_headers_are_linkable()","test_that_html_blocks_do_not_require_their_own_end_tag_line()","test_that_inline_markdown_goes_to_html()","test_that_inline_markdown_starts_and_ends_correctly()","test_that_intra_emphasis_works()","test_that_no_image_flag_works()","test_that_no_links_flag_works()","test_that_safelink_flag_works()","test_that_simple_one_liner_goes_to_html()","test_that_smart_converts_double_quotes_to_curly_quotes()","test_that_smart_converts_single_quotes_in_words_that_end_in_ll()","test_that_smart_converts_single_quotes_in_words_that_end_in_re()","test_that_smart_gives_d_suffix_a_rsquo()","test_that_smart_gives_m_suffix_a_rsquo()","test_that_smart_gives_ve_suffix_a_rsquo()","test_that_tables_flag_works()","test_that_tags_can_have_dashes_and_underscores()","test_that_urls_are_not_doubly_escaped()","test_unbound_recursion()","test_whitespace_after_urls()","text()","text()","text()","text!()","text?()","title()","title()","to_a()","to_angle()","to_blob()","to_blob()","to_f()","to_h()","to_html()","to_html()","to_html()","to_html()","to_i()","to_int64()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json_raw()","to_json_raw_object()","to_original_html()","to_plain_text()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","today()","total_changes()","total_time()","trace()","transaction()","transaction_active?()","translate()","translator()","traverse_all_element()","traverse_all_element()","traverse_all_element()","traverse_element()","traverse_some_element()","traverse_some_element()","traverse_some_element()","traverse_text()","traverse_text_internal()","traverse_text_internal()","traverse_text_internal()","tune()","turn()","tween()","type()","type()","type=()","types()","types()","u()","u=()","undo!()","undo_todo()","universal()","universal?()","unrotate()","update()","update()","update()","update()","update_position()","update_scene()","update_velocity()","updated()","user_cookie()","user_cookie=()","uxs()","v=()","valid_location?()","vdbe_trace()","vdbe_trace=()","vec2()","w=()","west()","wiki_tokens()","window()","world2local()","wrap()","wrap_vect()","x()","x()","x=()","xchr()","xhtml_strict()","xhtml_transitional()","xmldecl?()","xpath()","xpath()","xs()","xzf()","y()","y=()","changelog","copying","gemfile","rakefile","rakefile_for_windows","shoes","makefile","dlls","pangorc","pkg-dmg","shoes","shoes-launch","install","makefile","license","readme","mkhfz","copying","readme","license","readme","readme_for_shoes","readme","license","gemspec","gpl","readme","ruby","gemspec","copying","rakefile","license","gemspec","pkgbuild","manual-en","manual-ja","sh-install"],"longSearchIndex":["accordion","array","bignum","binject","binject::dmg","binject::exe","bloops","bloops::sound","bloops::track","book","building","cp","cp::bb","cp::body","cp::joint","cp::joint::groove","cp::joint::pin","cp::joint::pivot","cp::joint::slide","cp::shape","cp::shape::circle","cp::shape::poly","cp::shape::segment","cp::space","cp::vec2","calc","chipmunk","class","collisions","comic","customrendertest","customrendertest::simplerender","database","date","datetime","encoding","enumerable","exception","ftsearch","ftsearch::analysis","ftsearch::analysis::analyzer","ftsearch::analysis::simpleidentifieranalyzer","ftsearch::analysis::whitespaceanalyzer","ftsearch::documentmapreader","ftsearch::documentmapwriter","ftsearch::fieldinfos","ftsearch::fragmentwriter","ftsearch::fulltextreader","ftsearch::fulltextwriter","ftsearch::inmemorywriter","ftsearch::suffixarrayreader","ftsearch::suffixarrayreader::hit","ftsearch::suffixarrayreader::lazyhits","ftsearch::suffixarraywriter","falseclass","field","field::bomb","field::cell","field::emptycell","field::opencell","file","fixnum","float","gem","gem::ext::extconfbuilder","gem::shoesface","gem::shoesface::progressreporter","gem::shoesface::silentdownloadreporter","guidance","htmlrendertest","hash","homebrew","hpricot","hpricot::blankslate","hpricot::bogusetag","hpricot::bogusetag::trav","hpricot::builder","hpricot::cdata","hpricot::cdata::trav","hpricot::comment","hpricot::comment::trav","hpricot::container","hpricot::container::trav","hpricot::context","hpricot::cssproxy","hpricot::doc","hpricot::doc::trav","hpricot::doctype","hpricot::doctype::trav","hpricot::etag","hpricot::elem","hpricot::elem::trav","hpricot::elements","hpricot::encodingerror","hpricot::error","hpricot::leaf","hpricot::leaf::trav","hpricot::name","hpricot::node","hpricot::parseerror","hpricot::procins","hpricot::procins::trav","hpricot::tag","hpricot::text","hpricot::text::trav","hpricot::traverse","hpricot::xhtmlstrict","hpricot::xhtmltransitional","hpricot::xmldecl","hpricot::xmldecl::trav","json","json::circulardatastructure","json::ext","json::ext::generator","json::ext::generator::generatormethods","json::ext::generator::generatormethods::array","json::ext::generator::generatormethods::falseclass","json::ext::generator::generatormethods::float","json::ext::generator::generatormethods::hash","json::ext::generator::generatormethods::integer","json::ext::generator::generatormethods::nilclass","json::ext::generator::generatormethods::object","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods::string::extend","json::ext::generator::generatormethods::trueclass","json::ext::generator::state","json::ext::parser","json::generatorerror","json::jsonerror","json::missingunicodesupport","json::nestingerror","json::parsererror","json::unparsererror","kernel","life","make","makedarwin","makelinux","makemingw","markdowntest","menupanel","mimickirb","mimickirb::continue","mimickirb::empty","module","nilclass","notsupportedbyshoes","numeric","object","opp","othello","othello::game","othello::game::player","override","pathologicalinputstest","proc","range","redcarpet","redcarpet::markdown","redcarpet::render","redcarpet::render::base","redcarpet::render::html","redcarpet::render::html_toc","redcarpet::render::manpage","redcarpet::render::smartyhtml","redcarpet::render::smartypants","redcarpet::render::xhtml","regexp","sqlite3","sqlite3::abortexception","sqlite3::authorizationexception","sqlite3::blob","sqlite3::busyexception","sqlite3::cantopenexception","sqlite3::constants","sqlite3::constants::columntype","sqlite3::constants::errorcode","sqlite3::constants::textrep","sqlite3::constraintexception","sqlite3::corruptexception","sqlite3::database","sqlite3::database::functionproxy","sqlite3::emptyexception","sqlite3::exception","sqlite3::formatexception","sqlite3::fullexception","sqlite3::ioexception","sqlite3::internalexception","sqlite3::interruptexception","sqlite3::lockedexception","sqlite3::memoryexception","sqlite3::mismatchexception","sqlite3::misuseexception","sqlite3::notadatabaseexception","sqlite3::notfoundexception","sqlite3::permissionexception","sqlite3::pragmas","sqlite3::protocolexception","sqlite3::rangeexception","sqlite3::readonlyexception","sqlite3::resultset","sqlite3::resultset::arraywithtypes","sqlite3::resultset::arraywithtypesandfields","sqlite3::resultset::hashwithtypes","sqlite3::sqlexception","sqlite3::schemachangedexception","sqlite3::statement","sqlite3::toobigexception","sqlite3::translator","sqlite3::unsupportedexception","sqlite3::value","sqlite3::version","shell","shellcommandrunner","shoes","shoes::animation","shoes::app","shoes::background","shoes::banner","shoes::basic","shoes::border","shoes::button","shoes::canvas","shoes::caption","shoes::check","shoes::code","shoes::color","shoes::del","shoes::dialog","shoes::download","shoes::download::response","shoes::editbox","shoes::editline","shoes::effect","shoes::em","shoes::every","shoes::flow","shoes::image","shoes::imageerror","shoes::ins","shoes::inscription","shoes::invalidmodeerror","shoes::link","shoes::linkhover","shoes::linkurl","shoes::listbox","shoes::logwindow","shoes::manual","shoes::mask","shoes::mouse","shoes::native","shoes::notimplementederror","shoes::pack","shoes::para","shoes::pattern","shoes::progress","shoes::radio","shoes::search","shoes::settingup","shoes::setup","shoes::shape","shoes::slider","shoes::span","shoes::stack","shoes::strong","shoes::sub","shoes::subtitle","shoes::sup","shoes::tagline","shoes::text","shoes::textblock","shoes::timer","shoes::timerbase","shoes::title","shoes::types","shoes::types::app","shoes::types::widget","shoes::video","shoes::videoerror","shoes::widget","shoes::window","shy","smartypantstest","string","struct","symbol","tank","time","trueclass","hpricot::elements#%()","hpricot::traverse#%()","cp::vec2#*()","cp::vec2#+()","cp::vec2#-()","cp::vec2#-@()","array#/()","cp::vec2#/()","hpricot::elements#/()","hpricot::traverse#/()","hpricot::builder#<<()","object#hpricot()","kernel#json()","hpricot::xml()","ftsearch::fieldinfos#[]()","ftsearch::suffixarrayreader::lazyhits#[]()","hpricot::elem::trav#[]()","json::[]()","sqlite3::database::functionproxy#[]()","hpricot::elem::trav#[]=()","sqlite3::database::functionproxy#[]=()","shy::__hdr__()","cp::body#a=()","shoes::setup#activate_gem()","sqlite3::statement#active?()","cp::space#add_body()","hpricot::builder#add_child()","hpricot::elements#add_class()","cp::space#add_collision_func()","homebrew#add_custom_formulas()","homebrew#add_custom_remote()","ftsearch::documentmapwriter#add_document()","ftsearch::fragmentwriter#add_document()","ftsearch::fulltextwriter#add_document()","shoes::search#add_document()","ftsearch::documentmapwriter#add_field()","ftsearch::fieldinfos#add_field()","cp::space#add_joint()","shoes::manual#add_next_link()","cp::space#add_shape()","opp::add_shell()","cp::space#add_static_shape()","ftsearch::suffixarraywriter#add_suffixes()","object#add_todo()","sqlite3::translator#add_translator()","hpricot::elements#after()","hpricot::traverse#after()","tank#aim()","gem::shoesface#alert()","field#all_found?()","json::ext::generator::state#allow_nan?()","object#answer()","hpricot::elements#append()","ftsearch::analysis::simpleidentifieranalyzer#append_suffixes()","ftsearch::analysis::whitespaceanalyzer#append_suffixes()","cp::body#apply_force()","cp::body#apply_impulse()","json::ext::generator::state#array_nl()","json::ext::generator::state#array_nl=()","shoes::manual::as()","gem::shoesface#ask()","gem::shoesface#ask_yes_no()","hpricot::elements#at()","hpricot::traverse#at()","hpricot::elements#attr()","hpricot::doc::trav#author()","sqlite3::database#authorizer()","sqlite3::database#authorizer=()","sqlite3::pragmas#auto_vacuum()","sqlite3::pragmas#auto_vacuum=()","cp::bb#b()","cp::bb#b=()","cp::shape#bb()","hpricot::elements#before()","hpricot::traverse#before()","cp::bias_coef()","cp::bias_coef=()","sqlite3::statement#bind_param()","sqlite3::statement#bind_parameter_count()","sqlite3::statement#bind_params()","redcarpet::render::manpage#block_code()","othello::game#board_at()","cp::shape#body()","cp::shape#body=()","hpricot::traverse#bogusetag?()","field#bombs_left()","shellcommandrunner#brew_installed?()","hpricot::build()","hpricot::builder#build()","shoes::setup#bundler()","sqlite3::database#busy_handler()","sqlite3::database#busy_timeout()","sqlite3::database#busy_timeout=()","shy::c()","cp::shape#cache_bb()","sqlite3::pragmas#cache_size()","sqlite3::pragmas#cache_size=()","othello::game#calculate_current_winner()","make#cc()","sqlite3::database#changes()","database::check_cache_for()","json::ext::generator::state#check_circular?()","othello::game#check_direction()","homebrew#checkout_formula()","hpricot::traverse#children_of_type()","binject::dmg#chmod_file()","cp::bb#clamp_vect()","shoes::manual#class_tree()","hpricot::container::trav#classes()","hpricot::traverse#clean_path()","bloops#clear()","field#click!()","object#clock_hand()","sqlite3::database#close()","sqlite3::resultset#close()","sqlite3::statement#close()","sqlite3::database#closed?()","sqlite3::resultset#closed?()","sqlite3::statement#closed?()","sqlite3::exception::code()","sqlite3::exception#code()","redcarpet::render::manpage#codespan()","tank#collide_and_stop()","cp::collision_slop()","cp::collision_slop=()","cp::shape#collision_type()","cp::shape#collision_type=()","shoes::manual#color_page()","sqlite3::statement#column_count()","sqlite3::statement#column_decltype()","sqlite3::statement#column_name()","sqlite3::resultset#columns()","sqlite3::statement#columns()","hpricot::traverse#comment?()","sqlite3::database#commit()","make#common_build()","sqlite3::database#complete?()","object#complete_todo()","hpricot::builder#concat()","json::ext::generator::state#configure()","hpricot::container::trav#containers()","collisions#contains?()","ftsearch::suffixarrayreader::hit#context()","makedarwin::copy_deps_to_dist()","makelinux::copy_deps_to_dist()","makemingw::copy_deps_to_dist()","makedarwin::copy_ext()","makelinux::copy_ext()","makemingw::copy_ext()","make#copy_files()","make#copy_files_to_dist()","sqlite3::database::functionproxy#count()","ftsearch::suffixarrayreader#count_hits()","chipmunk#cp_line()","object#cp_move()","chipmunk#cp_oval()","chipmunk#cp_space()","sqlite3::database#create_aggregate()","sqlite3::database#create_aggregate_handler()","sqlite3::database#create_function()","cp::vec2#cross()","hpricot::doc::trav#css_path()","hpricot::traverse#css_path()","othello::game#current_player()","homebrew#custom_formulas()","shy::czf()","cp::damped_spring()","cp::space#damping()","cp::space#damping=()","ftsearch::inmemorywriter#data()","object#data_path()","sqlite3::pragmas#database_list()","sqlite3::statement#database_name()","life#dead?()","sqlite3::pragmas#default_cache_size()","sqlite3::pragmas#default_cache_size=()","sqlite3::pragmas#default_synchronous()","sqlite3::pragmas#default_synchronous=()","sqlite3::pragmas#default_temp_store()","sqlite3::pragmas#default_temp_store=()","sqlite3::database#define_aggregator()","sqlite3::database#define_function()","shoes::manual#dewikify()","shoes::manual#dewikify_code()","shoes::manual#dewikify_hi()","shoes::manual#dewikify_p()","shoes::pack::dmg()","hpricot::traverse#doc?()","hpricot::builder#doctype()","hpricot::traverse#doctype?()","ftsearch::documentmapreader#document_id()","ftsearch::documentmapreader#document_id_to_uri()","ftsearch::documentmapreader#document_uri()","ftsearch::fragmentwriter#documents()","gem::shoesface::progressreporter#done()","gem::shoesface::silentdownloadreporter#done()","sqlite3::statement#done?()","cp::vec2#dot()","redcarpet::render::manpage#double_emphasis()","gem::shoesface#download_reporter()","building#draw()","shell#draw()","tank#draw()","object#draw_background()","othello#draw_board()","opp::draw_opp_box()","opp::draw_opp_oval()","opp::draw_opp_plane()","opp::draw_opp_rect()","othello#draw_player_1()","othello#draw_player_2()","shy::du()","json#dump()","ftsearch::documentmapreader#dump_data()","ftsearch::fulltextreader#dump_data()","ftsearch::suffixarrayreader#dump_data()","cp::shape#e()","cp::shape#e=()","ftsearch::suffixarrayreader::lazyhits#each()","sqlite3::resultset#each()","sqlite3::statement#each()","hpricot::container::trav#each_child()","hpricot::container::trav#each_child_with_index()","hpricot::container::trav#each_hyperlink()","hpricot::container::trav#each_hyperlink_uri()","hpricot::container::trav#each_uri()","tank#east()","cp::space#elastic_iterations()","cp::space#elastic_iterations=()","hpricot::traverse#elem?()","customrendertest::simplerender#emphasis()","redcarpet::render::manpage#emphasis()","hpricot::elements#empty()","sqlite3::database#enable_load_extension()","sqlite3::database#encoding()","make#env()","sqlite3::resultset#eof?()","sqlite3::database#errcode()","sqlite3::database#errmsg()","gem::shoesface#error()","shoes::pack::exe()","sqlite3::database#execute()","sqlite3::statement#execute()","sqlite3::statement#execute!()","sqlite3::database#execute2()","sqlite3::database#execute_batch()","hpricot::elements::expand()","menupanel#expand()","override::extended()","cp::body#f=()","json#fast_generate()","string#fast_xs()","gem::shoesface::silentdownloadreporter#fetch()","ftsearch::documentmapreader#field_id()","ftsearch::fragmentwriter#field_id()","ftsearch::documentmapreader#field_info()","ftsearch::documentmapreader#field_size()","ftsearch::fragmentwriter#fields()","hpricot::container::trav#filter()","hpricot::elements::filter()","hpricot::elements#filter()","hpricot::traverse::filter()","sqlite3::database#finalize()","sqlite3::database::finalize()","ftsearch::suffixarrayreader#find_all()","shoes::search#find_all()","makelinux::find_and_copy()","hpricot::container::trav#find_element()","ftsearch::suffixarrayreader#find_first()","ftsearch::suffixarrayreader#find_next()","othello#find_piece()","ftsearch::analysis::analyzer#find_suffixes()","ftsearch::documentmapwriter#finish!()","ftsearch::fragmentwriter#finish!()","ftsearch::fulltextwriter#finish!()","ftsearch::suffixarraywriter#finish!()","shoes::search#finish!()","tank#fire()","field#flag!()","hpricot::traverse#following()","hpricot::container::trav#following_siblings()","sqlite3::pragmas#foreign_key_list()","json::ext::generator::state#forget()","object#forget_todo()","json::ext::generator::state::from_state()","sqlite3::pragmas#full_column_names()","sqlite3::pragmas#full_column_names=()","field#game_over?()","shoes::setup#gem()","shoes::setup::gem_reset()","json#generate()","hpricot::elem::trav#get_attribute()","ftsearch::fulltextreader#get_data()","makedarwin::get_dylibs()","hpricot::container::trav#get_element_by_id()","hpricot::container::trav#get_elements_by_tag_name()","sqlite3::database#get_first_row()","sqlite3::database#get_first_value()","hpricot::traverse#get_subnode()","shellcommandrunner#git_fetch()","shellcommandrunner#git_remote_add()","shellcommandrunner#git_remote_rm()","shellcommandrunner#git_repo_has_remote?()","cp::space#gravity()","cp::space#gravity=()","cp::shape#group()","cp::shape#group=()","binject::dmg#grow()","guidance#guidance_system()","hpricot::elem::trav#has_attribute?()","hpricot::builder#head()","redcarpet::render::manpage#header()","hpricot::blankslate::hide()","kernel::hpricot_slate_method_added()","object::hpricot_slate_method_added()","shy::hrun()","hpricot::elements#html()","hpricot::traverse#html()","hpricot::elements#html=()","object#html_equal()","hpricot::builder#html_tag()","life#hurt()","cp::body#i=()","book#incident()","json::ext::generator::generatormethods::string::included()","json::ext::generator::state#indent()","json::ext::generator::state#indent=()","book#index()","hpricot::traverse#index()","sqlite3::pragmas#index_info()","sqlite3::pragmas#index_list()","shoes::manual#index_page()","shoes::types::widget::inherited()","shoes::setup::init()","ftsearch::inmemorywriter#initialize_in_memory_buffer()","binject::exe#inject()","binject::dmg#inject_dir()","binject::dmg#inject_file()","hpricot::elements#innerhtml()","hpricot::traverse#innerhtml()","hpricot::elements#innerhtml=()","hpricot::traverse#innerhtml=()","hpricot::traverse#innertext()","hpricot::elements#inner_html()","hpricot::traverse#inner_html()","hpricot::elements#inner_html=()","hpricot::traverse#inner_html=()","hpricot::elements#inner_text()","hpricot::traverse#inner_text()","hpricot::container::trav#insert_after()","hpricot::container::trav#insert_before()","array#inspect()","file#inspect()","hash#inspect()","kernel#inspect()","proc#inspect()","shoes::types::app#inspect()","homebrew#install()","homebrew#install_packages()","shoes::setup::install_sources()","homebrew#installed?()","sqlite3::pragmas#integrity_check()","sqlite3::database#interrupt()","cp::bb#intersect?()","collisions#intersects?()","comic#items()","cp::space#iterations()","cp::space#iterations=()","kernel#j()","kernel#jj()","class#json_creatable?()","date::json_create()","datetime::json_create()","exception::json_create()","json::ext::generator::generatormethods::string::extend#json_create()","object::json_create()","range::json_create()","regexp::json_create()","struct::json_create()","time::json_create()","object#keep_in_frame()","cp::bb#l()","cp::bb#l=()","sqlite3::database#last_insert_row_id()","comic#latest_image()","shy::launchable()","othello::game#lay_initial_pieces()","othello::game#lay_piece()","cp::shape#layers()","cp::shape#layers=()","ftsearch::suffixarrayreader#lazyhits_to_offsets()","othello#left_top_corner_of_piece()","cp::vec2#length()","sqlite3::value#length()","cp::vec2#lengthsq()","sqlite3::libversion()","redcarpet::render::manpage#linebreak()","homebrew#link()","shoes::manual::link()","shoes::pack::linux()","redcarpet::render::manpage#list()","redcarpet::render::manpage#list_item()","bloops#load()","json#load()","object#load()","shoes::manual#load_docs()","sqlite3::database#load_extension()","object#load_list()","object#load_note()","cp::body#local2world()","cp::body#m=()","gem::ext::extconfbuilder::make()","hpricot::traverse#make()","gem::ext::extconfbuilder::make__()","makedarwin::make_app()","makelinux::make_app()","makemingw::make_app()","shoes::manual#make_html()","class#make_inspect()","makedarwin::make_installer()","makelinux::make_installer()","makemingw::make_installer()","makemingw::make_resource()","makedarwin::make_so()","makelinux::make_so()","makemingw::make_so()","makedarwin::make_stub()","shoes::manual#manual_search()","json::ext::generator::state#max_nesting()","json::ext::generator::state#max_nesting=()","shy::md5sum()","othello::game#memorize_board()","ftsearch::documentmapwriter#merge()","ftsearch::fragmentwriter#merge()","ftsearch::fulltextwriter#merge()","ftsearch::suffixarraywriter#merge()","shy::meta()","kernel::method_added()","object::method_added()","gem::shoesface#method_missing()","hpricot::cssproxy#method_missing()","cp::moment_for_circle()","cp::moment_for_poly()","cp::vec2#near?()","binject::dmg::new()","binject::exe::new()","building::new()","cp::bb::new()","cp::body::new()","cp::joint::groove::new()","cp::joint::pin::new()","cp::joint::pivot::new()","cp::joint::slide::new()","cp::shape::circle::new()","cp::shape::poly::new()","cp::shape::segment::new()","cp::space::new()","cp::vec2::new()","calc::new()","comic::new()","ftsearch::documentmapreader::new()","ftsearch::documentmapwriter::new()","ftsearch::fieldinfos::new()","ftsearch::fragmentwriter::new()","ftsearch::fulltextreader::new()","ftsearch::fulltextwriter::new()","ftsearch::suffixarrayreader::new()","ftsearch::suffixarraywriter::new()","field::new()","field::bomb::new()","field::cell::new()","field::opencell::new()","gem::shoesface::new()","gem::shoesface::progressreporter::new()","gem::shoesface::silentdownloadreporter::new()","homebrew::new()","hpricot::cssproxy::new()","json::ext::generator::state::new()","json::ext::parser::new()","menupanel::new()","mimickirb::new()","othello::game::new()","othello::game::player::new()","redcarpet::markdown::new()","redcarpet::render::base::new()","redcarpet::render::html::new()","redcarpet::render::html_toc::new()","redcarpet::render::xhtml::new()","sqlite3::database::new()","sqlite3::database::new()","sqlite3::database::functionproxy::new()","sqlite3::resultset::new()","sqlite3::statement::new()","sqlite3::translator::new()","sqlite3::value::new()","shell::new()","shellcommandrunner::new()","shoes::search::new()","shoes::setup::new()","tank::new()","othello::game#new_board()","object#new_game()","opp::new_game()","object#new_position()","hpricot::traverse#next()","sqlite3::resultset#next()","othello::game#next_in_direction()","hpricot::traverse#next_node()","othello::game#next_player()","hpricot::container::trav#next_sibling()","othello::game#next_turn()","shoes::setup#no_steps?()","hpricot::traverse#node_position()","hpricot::traverse#nodes_at()","redcarpet::render::manpage#normal_text()","cp::vec2#normalize()","cp::vec2#normalize!()","tank#north()","hpricot::elements#not()","database::notify_cache_of()","sqlite3::value#null?()","ftsearch::documentmapreader#num_documents()","json::ext::generator::state#object_nl()","json::ext::generator::state#object_nl=()","ftsearch::documentmapreader#offsets_to_field_infos()","sqlite3::database::open()","shoes::manual#open_link()","shoes::manual#open_methods()","accordion#open_page()","shoes::manual#open_section()","othello::game::player#opp_piece()","shoes::manual::p()","cp::body#p=()","accordion#page()","field#paint()","redcarpet::render::manpage#paragraph()","hpricot::parse()","json#parse()","json::ext::parser#parse()","json#parse!()","sqlite3::pragmas#parser_trace()","sqlite3::pragmas#parser_trace=()","shoes::manual::path()","cp::vec2#perp()","othello::game::player#piece()","shoes::pack::pkg()","bloops#play()","hpricot::traverse#position()","othello::game#possible_move?()","redcarpet::render::smartypants#postprocess()","hpricot::traverse#preceding()","hpricot::container::trav#preceding_siblings()","sqlite3::database#prepare()","hpricot::elements#prepend()","calc#press_clear()","calc#press_equals()","json#pretty_generate()","hpricot::traverse#previous()","hpricot::traverse#previous_node()","hpricot::container::trav#previous_sibling()","hpricot::traverse#procins?()","gem::shoesface#progress()","shy::progress()","gem::shoesface#progress_reporter()","cp::vec2#project()","opp::project()","sqlite3::database#query()","sqlite3::database::quote()","cp::bb#r()","cp::bb#r=()","range#rand()","object#random_amount()","object#random_direction()","object#random_position()","ftsearch::documentmapreader#rank_offsets()","ftsearch::documentmapreader#rank_offsets_probabilistic()","opp::read_input()","json::recurse_proc()","object#refresh()","object#refresh_todo()","cp::space#rehash_static()","json::ext::generator::state#remember()","hpricot::elements#remove()","hpricot::elements#remove_attr()","hpricot::elem::trav#remove_attribute()","cp::space#remove_body()","hpricot::elements#remove_class()","cp::space#remove_collision_func()","homebrew#remove_custom_formulas()","homebrew#remove_custom_remote()","cp::space#remove_joint()","cp::space#remove_shape()","cp::space#remove_static_shape()","redcarpet::markdown#render()","redcarpet::render::smartypants::render()","field#render_bomb()","field#render_cell()","object#render_field()","field#render_flag()","field#render_number()","htmlrendertest#render_with()","markdowntest#render_with()","hpricot::container::trav#replace_child()","bloops::sound#reset()","sqlite3::resultset#reset()","sqlite3::statement#reset!()","cp::body#reset_forces()","cp::shape::reset_id_counter()","cp::space#resize_active_hash()","cp::space#resize_static_hash()","json::restore()","field#reveal!()","make#rewrite()","shoes::pack::rewrite()","othello#right_bottom_corner_of_piece()","sqlite3::database#rollback()","hpricot::doc::trav#root()","cp::body#rot()","cp::vec2#rotate()","mimickirb#run()","shellcommandrunner#run()","shoes::manual#run_code()","shoes::manual#sample_page()","binject::dmg#save()","binject::exe#save()","object#save()","gem::shoesface#say()","hpricot::scan()","sqlite3::pragmas#schema_cookie()","sqlite3::pragmas#schema_cookie=()","hpricot::elements#search()","hpricot::traverse#search()","json::ext::generator::state#seen?()","hpricot::builder::set()","hpricot::elements#set()","hpricot::elem::trav#set_attribute()","cp::space#set_default_collision_func()","tank#set_destination()","sqlite3::database::functionproxy#set_error()","database::setup()","htmlrendertest#setup()","markdowntest#setup()","pathologicalinputstest#setup()","shoes::logwindow#setup()","smartypantstest#setup()","shoes::setup::setup_app()","makedarwin::setup_system_resources()","makelinux::setup_system_resources()","makemingw::setup_system_resources()","homebrew#sh()","makemingw::sh()","cp::space#shape_point_query()","shoes::manual#show_search()","hpricot::container::trav#siblings_at()","ftsearch::suffixarrayreader::lazyhits#size()","object#skel_replace()","othello::game#skip_turn?()","object#slide_anim()","object#slide_in()","object#slide_out()","bloops::sound()","bloops#sound()","json::ext::parser#source()","shoes::setup#source()","tank#south()","json::ext::generator::state#space()","json::ext::generator::state#space=()","json::ext::generator::state#space_before()","json::ext::generator::state#space_before=()","shoes::setup#start()","cp::space#static_shape_point_query()","cp::space#step()","sqlite3::database::step()","sqlite3::database#step()","sqlite3::statement#step()","object#stop_anim()","bloops#stopped?()","ftsearch::suffixarrayreader#suffix_index_to_offset()","cp::shape#surface_v()","cp::shape#surface_v=()","shoes::setup#svn()","hpricot::traverse#swap()","sqlite3::pragmas#synchronous()","sqlite3::pragmas#synchronous=()","cp::bb#t()","cp::bb#t=()","cp::body#t=()","sqlite3::pragmas#table_info()","book#table_of_contents()","hpricot::builder#tag!()","opp::tank()","sqlite3::pragmas#temp_store()","sqlite3::pragmas#temp_store=()","bloops#tempo()","bloops#tempo=()","bloops::sound#test()","markdowntest#test_autolinking_with_ent_chars()","markdowntest#test_block_quotes_preceded_by_spaces()","htmlrendertest#test_filter_html_doesnt_break_two_space_hard_break()","markdowntest#test_headings_with_trailing_space()","markdowntest#test_infinite_loop_in_header()","markdowntest#test_link_syntax_is_not_processed_within_code_blocks()","markdowntest#test_memory_leak_when_parsing_char_links()","markdowntest#test_para_before_block_html_should_not_wrap_in_p_tag()","pathologicalinputstest#test_pathological_1()","pathologicalinputstest#test_pathological_2()","pathologicalinputstest#test_pathological_3()","pathologicalinputstest#test_pathological_4()","markdowntest#test_should_return_string_in_same_encoding_as_input()","markdowntest#test_simple_inline_html()","customrendertest#test_simple_overload()","markdowntest#test_spaced_headers()","markdowntest#test_strikethrough_flag_works()","markdowntest#test_that_autolink_flag_works()","markdowntest#test_that_fenced_flag_works()","htmlrendertest#test_that_filter_html_works()","markdowntest#test_that_headers_are_linkable()","markdowntest#test_that_html_blocks_do_not_require_their_own_end_tag_line()","markdowntest#test_that_inline_markdown_goes_to_html()","markdowntest#test_that_inline_markdown_starts_and_ends_correctly()","markdowntest#test_that_intra_emphasis_works()","htmlrendertest#test_that_no_image_flag_works()","htmlrendertest#test_that_no_links_flag_works()","htmlrendertest#test_that_safelink_flag_works()","markdowntest#test_that_simple_one_liner_goes_to_html()","smartypantstest#test_that_smart_converts_double_quotes_to_curly_quotes()","smartypantstest#test_that_smart_converts_single_quotes_in_words_that_end_in_ll()","smartypantstest#test_that_smart_converts_single_quotes_in_words_that_end_in_re()","smartypantstest#test_that_smart_gives_d_suffix_a_rsquo()","smartypantstest#test_that_smart_gives_m_suffix_a_rsquo()","smartypantstest#test_that_smart_gives_ve_suffix_a_rsquo()","markdowntest#test_that_tables_flag_works()","markdowntest#test_that_tags_can_have_dashes_and_underscores()","markdowntest#test_that_urls_are_not_doubly_escaped()","pathologicalinputstest#test_unbound_recursion()","markdowntest#test_whitespace_after_urls()","ftsearch::suffixarrayreader::hit#text()","hpricot::builder#text()","hpricot::elements#text()","hpricot::builder#text!()","hpricot::traverse#text?()","gem::shoesface#title()","hpricot::doc::trav#title()","cp::vec2#to_a()","cp::vec2#to_angle()","sqlite3::value#to_blob()","string#to_blob()","sqlite3::value#to_f()","json::ext::generator::state#to_h()","array#to_html()","hash#to_html()","hpricot::elements#to_html()","hpricot::traverse#to_html()","sqlite3::value#to_i()","sqlite3::value#to_int64()","date#to_json()","datetime#to_json()","enumerable#to_json()","exception#to_json()","json::ext::generator::generatormethods::array#to_json()","json::ext::generator::generatormethods::falseclass#to_json()","json::ext::generator::generatormethods::float#to_json()","json::ext::generator::generatormethods::hash#to_json()","json::ext::generator::generatormethods::integer#to_json()","json::ext::generator::generatormethods::nilclass#to_json()","json::ext::generator::generatormethods::object#to_json()","json::ext::generator::generatormethods::string#to_json()","json::ext::generator::generatormethods::trueclass#to_json()","object#to_json()","range#to_json()","regexp#to_json()","struct#to_json()","symbol#to_json()","time#to_json()","json::ext::generator::generatormethods::string#to_json_raw()","json::ext::generator::generatormethods::string#to_json_raw_object()","hpricot::traverse#to_original_html()","hpricot::traverse#to_plain_text()","bloops::track#to_s()","cp::bb#to_s()","cp::vec2#to_s()","calc#to_s()","hpricot::elements#to_s()","hpricot::traverse#to_s()","kernel#to_s()","sqlite3::value#to_s()","time::today()","sqlite3::database#total_changes()","field#total_time()","sqlite3::database#trace()","sqlite3::database#transaction()","sqlite3::database#transaction_active?()","sqlite3::translator#translate()","sqlite3::database#translator()","hpricot::doc::trav#traverse_all_element()","hpricot::elem::trav#traverse_all_element()","hpricot::leaf::trav#traverse_all_element()","hpricot::traverse#traverse_element()","hpricot::doc::trav#traverse_some_element()","hpricot::elem::trav#traverse_some_element()","hpricot::leaf::trav#traverse_some_element()","hpricot::traverse#traverse_text()","hpricot::container::trav#traverse_text_internal()","hpricot::leaf::trav#traverse_text_internal()","hpricot::text::trav#traverse_text_internal()","bloops#tune()","tank#turn()","shoes::basic#tween()","bloops::sound#type()","sqlite3::value#type()","bloops::sound#type=()","sqlite3::resultset#types()","sqlite3::statement#types()","cp::shape#u()","cp::shape#u=()","othello::game#undo!()","object#undo_todo()","homebrew#universal()","homebrew#universal?()","cp::vec2#unrotate()","gem::shoesface::silentdownloadreporter#update()","shell#update()","shoes::logwindow#update()","tank#update()","cp::body#update_position()","opp::update_scene()","cp::body#update_velocity()","gem::shoesface::progressreporter#updated()","sqlite3::pragmas#user_cookie()","sqlite3::pragmas#user_cookie=()","hpricot::uxs()","cp::body#v=()","othello::game#valid_location?()","sqlite3::pragmas#vdbe_trace()","sqlite3::pragmas#vdbe_trace=()","kernel#vec2()","cp::body#w=()","tank#west()","shoes::manual#wiki_tokens()","object#window()","cp::body#world2local()","hpricot::elements#wrap()","cp::bb#wrap_vect()","cp::vec2#x()","shy::x()","cp::vec2#x=()","hpricot::xchr()","hpricot::builder#xhtml_strict()","hpricot::builder#xhtml_transitional()","hpricot::traverse#xmldecl?()","hpricot::doc::trav#xpath()","hpricot::traverse#xpath()","hpricot::xs()","shy::xzf()","cp::vec2#y()","cp::vec2#y=()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["Accordion","","classes/Accordion.html","",""],["Array","","classes/Array.html","",""],["Bignum","","classes/Bignum.html","",""],["Binject","","classes/Binject.html","",""],["Binject::DMG","","classes/Binject/DMG.html","",""],["Binject::EXE","","classes/Binject/EXE.html","",""],["Bloops","","classes/Bloops.html","",""],["Bloops::Sound","","classes/Bloops/Sound.html","",""],["Bloops::Track","","classes/Bloops/Track.html","",""],["Book","","classes/Book.html","",""],["Building","","classes/Building.html","",""],["CP","","classes/CP.html","",""],["CP::BB","","classes/CP/BB.html","",""],["CP::Body","","classes/CP/Body.html","",""],["CP::Joint","","classes/CP/Joint.html","",""],["CP::Joint::Groove","","classes/CP/Joint/Groove.html","",""],["CP::Joint::Pin","","classes/CP/Joint/Pin.html","",""],["CP::Joint::Pivot","","classes/CP/Joint/Pivot.html","",""],["CP::Joint::Slide","","classes/CP/Joint/Slide.html","",""],["CP::Shape","","classes/CP/Shape.html","",""],["CP::Shape::Circle","","classes/CP/Shape/Circle.html","",""],["CP::Shape::Poly","","classes/CP/Shape/Poly.html","",""],["CP::Shape::Segment","","classes/CP/Shape/Segment.html","",""],["CP::Space","","classes/CP/Space.html","",""],["CP::Vec2","","classes/CP/Vec2.html","",""],["Calc","","classes/Calc.html","",""],["ChipMunk","","classes/ChipMunk.html","",""],["Class","","classes/Class.html","",""],["Collisions","","classes/Collisions.html","",""],["Comic","","classes/Comic.html","",""],["CustomRenderTest","","classes/CustomRenderTest.html","",""],["CustomRenderTest::SimpleRender","","classes/CustomRenderTest/SimpleRender.html","",""],["DATABASE","","classes/DATABASE.html","",""],["Date","","classes/Date.html","",""],["DateTime","","classes/DateTime.html","",""],["Encoding","","classes/Encoding.html","","<p>Shoes-specific extensions to core Ruby classes\n"],["Enumerable","","classes/Enumerable.html","",""],["Exception","","classes/Exception.html","",""],["FTSearch","","classes/FTSearch.html","","<p>Copyright (C) 2006  Mauricio Fernandez &lt;mfp@acm.org&gt;\n<p>Copyright (C) 2006  Mauricio Fernandez &lt;mfp@ …\n"],["FTSearch::Analysis","","classes/FTSearch/Analysis.html","",""],["FTSearch::Analysis::Analyzer","","classes/FTSearch/Analysis/Analyzer.html","",""],["FTSearch::Analysis::SimpleIdentifierAnalyzer","","classes/FTSearch/Analysis/SimpleIdentifierAnalyzer.html","",""],["FTSearch::Analysis::WhiteSpaceAnalyzer","","classes/FTSearch/Analysis/WhiteSpaceAnalyzer.html","",""],["FTSearch::DocumentMapReader","","classes/FTSearch/DocumentMapReader.html","",""],["FTSearch::DocumentMapWriter","","classes/FTSearch/DocumentMapWriter.html","",""],["FTSearch::FieldInfos","","classes/FTSearch/FieldInfos.html","",""],["FTSearch::FragmentWriter","","classes/FTSearch/FragmentWriter.html","",""],["FTSearch::FulltextReader","","classes/FTSearch/FulltextReader.html","",""],["FTSearch::FulltextWriter","","classes/FTSearch/FulltextWriter.html","",""],["FTSearch::InMemoryWriter","","classes/FTSearch/InMemoryWriter.html","",""],["FTSearch::SuffixArrayReader","","classes/FTSearch/SuffixArrayReader.html","",""],["FTSearch::SuffixArrayReader::Hit","","classes/FTSearch/SuffixArrayReader/Hit.html","",""],["FTSearch::SuffixArrayReader::LazyHits","","classes/FTSearch/SuffixArrayReader/LazyHits.html","",""],["FTSearch::SuffixArrayWriter","","classes/FTSearch/SuffixArrayWriter.html","",""],["FalseClass","","classes/FalseClass.html","",""],["Field","","classes/Field.html","",""],["Field::Bomb","","classes/Field/Bomb.html","",""],["Field::Cell","","classes/Field/Cell.html","",""],["Field::EmptyCell","","classes/Field/EmptyCell.html","",""],["Field::OpenCell","","classes/Field/OpenCell.html","",""],["File","","classes/File.html","",""],["Fixnum","","classes/Fixnum.html","",""],["Float","","classes/Float.html","",""],["Gem","","classes/Gem.html","",""],["Gem::Ext::ExtConfBuilder","","classes/Gem/Ext/ExtConfBuilder.html","",""],["Gem::ShoesFace","","classes/Gem/ShoesFace.html","",""],["Gem::ShoesFace::ProgressReporter","","classes/Gem/ShoesFace/ProgressReporter.html","",""],["Gem::ShoesFace::SilentDownloadReporter","","classes/Gem/ShoesFace/SilentDownloadReporter.html","",""],["Guidance","","classes/Guidance.html","",""],["HTMLRenderTest","","classes/HTMLRenderTest.html","",""],["Hash","","classes/Hash.html","",""],["Homebrew","","classes/Homebrew.html","",""],["Hpricot","","classes/Hpricot.html","","\n<pre>Permission is granted for use, copying, modification, distribution,\nand distribution of modified versions ...</pre>\n"],["Hpricot::BlankSlate","","classes/Hpricot/BlankSlate.html","","<p>BlankSlate provides an abstract base class with no predefined methods\n(except for <code>__send__</code> and <code>__id__</code> …\n"],["Hpricot::BogusETag","","classes/Hpricot/BogusETag.html","",""],["Hpricot::BogusETag::Trav","","classes/Hpricot/BogusETag/Trav.html","",""],["Hpricot::Builder","","classes/Hpricot/Builder.html","",""],["Hpricot::CData","","classes/Hpricot/CData.html","",""],["Hpricot::CData::Trav","","classes/Hpricot/CData/Trav.html","",""],["Hpricot::Comment","","classes/Hpricot/Comment.html","",""],["Hpricot::Comment::Trav","","classes/Hpricot/Comment/Trav.html","",""],["Hpricot::Container","","classes/Hpricot/Container.html","",""],["Hpricot::Container::Trav","","classes/Hpricot/Container/Trav.html","",""],["Hpricot::Context","","classes/Hpricot/Context.html","",""],["Hpricot::CssProxy","","classes/Hpricot/CssProxy.html","","<p>Class used by Markaby::Builder to store element options.  Methods called\nagainst the CssProxy object …\n"],["Hpricot::Doc","","classes/Hpricot/Doc.html","",""],["Hpricot::Doc::Trav","","classes/Hpricot/Doc/Trav.html","",""],["Hpricot::DocType","","classes/Hpricot/DocType.html","",""],["Hpricot::DocType::Trav","","classes/Hpricot/DocType/Trav.html","",""],["Hpricot::ETag","","classes/Hpricot/ETag.html","",""],["Hpricot::Elem","","classes/Hpricot/Elem.html","",""],["Hpricot::Elem::Trav","","classes/Hpricot/Elem/Trav.html","",""],["Hpricot::Elements","","classes/Hpricot/Elements.html","","<p>Once you’ve matched a list of elements, you will often need to handle them\nas a group.  Or you may want …\n"],["Hpricot::EncodingError","","classes/Hpricot/EncodingError.html","","<p>Exception class used for any errors related to deficiencies in the system\nwhen handling the character …\n"],["Hpricot::Error","","classes/Hpricot/Error.html","",""],["Hpricot::Leaf","","classes/Hpricot/Leaf.html","",""],["Hpricot::Leaf::Trav","","classes/Hpricot/Leaf/Trav.html","",""],["Hpricot::Name","","classes/Hpricot/Name.html","",""],["Hpricot::Node","","classes/Hpricot/Node.html","",""],["Hpricot::ParseError","","classes/Hpricot/ParseError.html","",""],["Hpricot::ProcIns","","classes/Hpricot/ProcIns.html","",""],["Hpricot::ProcIns::Trav","","classes/Hpricot/ProcIns/Trav.html","",""],["Hpricot::Tag","","classes/Hpricot/Tag.html","",""],["Hpricot::Text","","classes/Hpricot/Text.html","",""],["Hpricot::Text::Trav","","classes/Hpricot/Text/Trav.html","",""],["Hpricot::Traverse","","classes/Hpricot/Traverse.html","",""],["Hpricot::XHTMLStrict","","classes/Hpricot/XHTMLStrict.html","","<p>All the tags and attributes from XHTML 1.0 Strict\n"],["Hpricot::XHTMLTransitional","","classes/Hpricot/XHTMLTransitional.html","","<p>Additional tags found in XHTML 1.0 Transitional\n"],["Hpricot::XMLDecl","","classes/Hpricot/XMLDecl.html","",""],["Hpricot::XMLDecl::Trav","","classes/Hpricot/XMLDecl/Trav.html","",""],["JSON","","classes/JSON.html","",""],["JSON::CircularDatastructure","","classes/JSON/CircularDatastructure.html","","<p>If a circular data structure is encountered while unparsing this exception\nis raised.\n"],["JSON::Ext","","classes/JSON/Ext.html","","<p>This module holds all the modules/classes that implement JSON’s\nfunctionality as C extensions.\n"],["JSON::Ext::Generator","","classes/JSON/Ext/Generator.html","","<p>This is the JSON generator implemented as a C extension. It can be\nconfigured to be used by setting\n\n<pre>JSON.generator ...</pre>\n"],["JSON::Ext::Generator::GeneratorMethods","","classes/JSON/Ext/Generator/GeneratorMethods.html","",""],["JSON::Ext::Generator::GeneratorMethods::Array","","classes/JSON/Ext/Generator/GeneratorMethods/Array.html","",""],["JSON::Ext::Generator::GeneratorMethods::FalseClass","","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html","",""],["JSON::Ext::Generator::GeneratorMethods::Float","","classes/JSON/Ext/Generator/GeneratorMethods/Float.html","",""],["JSON::Ext::Generator::GeneratorMethods::Hash","","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html","",""],["JSON::Ext::Generator::GeneratorMethods::Integer","","classes/JSON/Ext/Generator/GeneratorMethods/Integer.html","",""],["JSON::Ext::Generator::GeneratorMethods::NilClass","","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html","",""],["JSON::Ext::Generator::GeneratorMethods::Object","","classes/JSON/Ext/Generator/GeneratorMethods/Object.html","",""],["JSON::Ext::Generator::GeneratorMethods::String","","classes/JSON/Ext/Generator/GeneratorMethods/String.html","",""],["JSON::Ext::Generator::GeneratorMethods::String::Extend","","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html","",""],["JSON::Ext::Generator::GeneratorMethods::TrueClass","","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html","",""],["JSON::Ext::Generator::State","","classes/JSON/Ext/Generator/State.html","","<p>This class is used to create State instances, that are use to hold data\nwhile generating a JSON text …\n"],["JSON::Ext::Parser","","classes/JSON/Ext/Parser.html","","<p>This is the JSON parser implemented as a C extension. It can be configured\nto be used by setting\n\n<pre>JSON.parser ...</pre>\n"],["JSON::GeneratorError","","classes/JSON/GeneratorError.html","","<p>This exception is raised, if a generator or unparser error occurs.\n"],["JSON::JSONError","","classes/JSON/JSONError.html","","<p>The base exception for JSON errors.\n"],["JSON::MissingUnicodeSupport","","classes/JSON/MissingUnicodeSupport.html","","<p>This exception is raised, if the required unicode support is missing on the\nsystem. Usually this means, …\n"],["JSON::NestingError","","classes/JSON/NestingError.html","","<p>This exception is raised, if the nesting of parsed datastructures is too\ndeep.\n"],["JSON::ParserError","","classes/JSON/ParserError.html","","<p>This exception is raised, if a parser error occurs.\n"],["JSON::UnparserError","","classes/JSON/GeneratorError.html","","<p>This exception is raised, if a generator or unparser error occurs.\n"],["Kernel","","classes/Kernel.html","","<p>Since Ruby is very dynamic, methods added to the ancestors of BlankSlate\n<em>after BlankSlate is defined</em> …\n"],["Life","","classes/Life.html","",""],["Make","","classes/Make.html","",""],["MakeDarwin","","classes/MakeDarwin.html","",""],["MakeLinux","","classes/MakeLinux.html","",""],["MakeMinGW","","classes/MakeMinGW.html","",""],["MarkdownTest","","classes/MarkdownTest.html","",""],["MenuPanel","","classes/MenuPanel.html","",""],["MimickIRB","","classes/MimickIRB.html","",""],["MimickIRB::Continue","","classes/MimickIRB/Continue.html","",""],["MimickIRB::Empty","","classes/MimickIRB/Empty.html","",""],["Module","","classes/Module.html","",""],["NilClass","","classes/NilClass.html","",""],["NotSupportedByShoes","","classes/NotSupportedByShoes.html","","<p>STDIN.reopen(“/dev/tty”) if STDIN.eof?\n"],["Numeric","","classes/Numeric.html","",""],["Object","","classes/Object.html","",""],["Opp","","classes/Opp.html","",""],["Othello","","classes/Othello.html","","<p>Othello by tieg 1/13/08 with help: DeeJay, Ryan M. from mailing list\n<p>FIXME bug if it memorizes it but …\n"],["Othello::Game","","classes/Othello/Game.html","",""],["Othello::Game::Player","","classes/Othello/Game/Player.html","",""],["Override","","classes/Override.html","",""],["PathologicalInputsTest","","classes/PathologicalInputsTest.html","","<p>Disabled by default (these are the easy ones – the evil ones are not\ndisclosed)\n"],["Proc","","classes/Proc.html","",""],["Range","","classes/Range.html","",""],["Redcarpet","","classes/Redcarpet.html","",""],["Redcarpet::Markdown","","classes/Redcarpet/Markdown.html","",""],["Redcarpet::Render","","classes/Redcarpet/Render.html","",""],["Redcarpet::Render::Base","","classes/Redcarpet/Render/Base.html","",""],["Redcarpet::Render::HTML","","classes/Redcarpet/Render/HTML.html","",""],["Redcarpet::Render::HTML_TOC","","classes/Redcarpet/Render/HTML_TOC.html","",""],["Redcarpet::Render::ManPage","","classes/Redcarpet/Render/ManPage.html","",""],["Redcarpet::Render::SmartyHTML","","classes/Redcarpet/Render/SmartyHTML.html","","<p>HTML + SmartyPants renderer\n"],["Redcarpet::Render::SmartyPants","","classes/Redcarpet/Render/SmartyPants.html","","<p>SmartyPants Mixin module\n<p>Implements SmartyPants.postprocess, which performs smartypants replacements\non …\n"],["Redcarpet::Render::XHTML","","classes/Redcarpet/Render/XHTML.html","","<p>XHTML Renderer\n"],["Regexp","","classes/Regexp.html","",""],["SQLite3","","classes/SQLite3.html","","<p>SQLite3 is a wrapper around the popular database sqlite.\n<p>For an example of usage, see SQLite3::Database …\n"],["SQLite3::AbortException","","classes/SQLite3/AbortException.html","",""],["SQLite3::AuthorizationException","","classes/SQLite3/AuthorizationException.html","",""],["SQLite3::Blob","","classes/SQLite3/Blob.html","","<p>A class for differentiating between strings and blobs, when binding them\n\n<pre>into statements.</pre>\n"],["SQLite3::BusyException","","classes/SQLite3/BusyException.html","",""],["SQLite3::CantOpenException","","classes/SQLite3/CantOpenException.html","",""],["SQLite3::Constants","","classes/SQLite3/Constants.html","",""],["SQLite3::Constants::ColumnType","","classes/SQLite3/Constants/ColumnType.html","",""],["SQLite3::Constants::ErrorCode","","classes/SQLite3/Constants/ErrorCode.html","",""],["SQLite3::Constants::TextRep","","classes/SQLite3/Constants/TextRep.html","",""],["SQLite3::ConstraintException","","classes/SQLite3/ConstraintException.html","",""],["SQLite3::CorruptException","","classes/SQLite3/CorruptException.html","",""],["SQLite3::Database","","classes/SQLite3/Database.html","","<p>The Database class encapsulates a single connection to a SQLite3 database.\nIts usage is very straightforward: …\n"],["SQLite3::Database::FunctionProxy","","classes/SQLite3/Database/FunctionProxy.html","","<p>A helper class for dealing with custom functions (see #create_function,\n#create_aggregate, and #create_aggregate_handler …\n"],["SQLite3::EmptyException","","classes/SQLite3/EmptyException.html","",""],["SQLite3::Exception","","classes/SQLite3/Exception.html","",""],["SQLite3::FormatException","","classes/SQLite3/FormatException.html","",""],["SQLite3::FullException","","classes/SQLite3/FullException.html","",""],["SQLite3::IOException","","classes/SQLite3/IOException.html","",""],["SQLite3::InternalException","","classes/SQLite3/InternalException.html","",""],["SQLite3::InterruptException","","classes/SQLite3/InterruptException.html","",""],["SQLite3::LockedException","","classes/SQLite3/LockedException.html","",""],["SQLite3::MemoryException","","classes/SQLite3/MemoryException.html","",""],["SQLite3::MismatchException","","classes/SQLite3/MismatchException.html","",""],["SQLite3::MisuseException","","classes/SQLite3/MisuseException.html","",""],["SQLite3::NotADatabaseException","","classes/SQLite3/NotADatabaseException.html","",""],["SQLite3::NotFoundException","","classes/SQLite3/NotFoundException.html","",""],["SQLite3::PermissionException","","classes/SQLite3/PermissionException.html","",""],["SQLite3::Pragmas","","classes/SQLite3/Pragmas.html","","<p>This module is intended for inclusion solely by the Database class. It\ndefines convenience methods for …\n"],["SQLite3::ProtocolException","","classes/SQLite3/ProtocolException.html","",""],["SQLite3::RangeException","","classes/SQLite3/RangeException.html","",""],["SQLite3::ReadOnlyException","","classes/SQLite3/ReadOnlyException.html","",""],["SQLite3::ResultSet","","classes/SQLite3/ResultSet.html","","<p>The ResultSet object encapsulates the enumerability of a query’s output. It\nis a simple cursor over the …\n"],["SQLite3::ResultSet::ArrayWithTypes","","classes/SQLite3/ResultSet/ArrayWithTypes.html","","<p>The class of which we return an object in case we want an Array as result.\n(ArrayFields is installed.) …\n"],["SQLite3::ResultSet::ArrayWithTypesAndFields","","classes/SQLite3/ResultSet/ArrayWithTypesAndFields.html","","<p>The class of which we return an object in case we want an Array as result.\n(ArrayFields is not installed.) …\n"],["SQLite3::ResultSet::HashWithTypes","","classes/SQLite3/ResultSet/HashWithTypes.html","","<p>The class of which we return an object in case we want a Hash as result.\n"],["SQLite3::SQLException","","classes/SQLite3/SQLException.html","",""],["SQLite3::SchemaChangedException","","classes/SQLite3/SchemaChangedException.html","",""],["SQLite3::Statement","","classes/SQLite3/Statement.html","","<p>A statement represents a prepared-but-unexecuted SQL query. It will rarely\n(if ever) be instantiated …\n"],["SQLite3::TooBigException","","classes/SQLite3/TooBigException.html","",""],["SQLite3::Translator","","classes/SQLite3/Translator.html","","<p>The Translator class encapsulates the logic and callbacks necessary for\nconverting string data to a value …\n"],["SQLite3::UnsupportedException","","classes/SQLite3/UnsupportedException.html","",""],["SQLite3::Value","","classes/SQLite3/Value.html","",""],["SQLite3::Version","","classes/SQLite3/Version.html","",""],["Shell","","classes/Shell.html","",""],["ShellCommandRunner","","classes/ShellCommandRunner.html","",""],["Shoes","","classes/Shoes.html","",""],["Shoes::Animation","","classes/Shoes/Animation.html","",""],["Shoes::App","","classes/Shoes/App.html","",""],["Shoes::Background","","classes/Shoes/Background.html","",""],["Shoes::Banner","","classes/Shoes/Banner.html","",""],["Shoes::Basic","","classes/Shoes/Basic.html","",""],["Shoes::Border","","classes/Shoes/Border.html","",""],["Shoes::Button","","classes/Shoes/Button.html","",""],["Shoes::Canvas","","classes/Shoes/Canvas.html","",""],["Shoes::Caption","","classes/Shoes/Caption.html","",""],["Shoes::Check","","classes/Shoes/Check.html","",""],["Shoes::Code","","classes/Shoes/Code.html","",""],["Shoes::Color","","classes/Shoes/Color.html","",""],["Shoes::Del","","classes/Shoes/Del.html","",""],["Shoes::Dialog","","classes/Shoes/Dialog.html","",""],["Shoes::Download","","classes/Shoes/Download.html","",""],["Shoes::Download::Response","","classes/Shoes/Download/Response.html","",""],["Shoes::EditBox","","classes/Shoes/EditBox.html","",""],["Shoes::EditLine","","classes/Shoes/EditLine.html","",""],["Shoes::Effect","","classes/Shoes/Effect.html","",""],["Shoes::Em","","classes/Shoes/Em.html","",""],["Shoes::Every","","classes/Shoes/Every.html","",""],["Shoes::Flow","","classes/Shoes/Flow.html","",""],["Shoes::Image","","classes/Shoes/Image.html","",""],["Shoes::ImageError","","classes/Shoes/ImageError.html","",""],["Shoes::Ins","","classes/Shoes/Ins.html","",""],["Shoes::Inscription","","classes/Shoes/Inscription.html","",""],["Shoes::InvalidModeError","","classes/Shoes/InvalidModeError.html","",""],["Shoes::Link","","classes/Shoes/Link.html","",""],["Shoes::LinkHover","","classes/Shoes/LinkHover.html","",""],["Shoes::LinkUrl","","classes/Shoes/LinkUrl.html","",""],["Shoes::ListBox","","classes/Shoes/ListBox.html","",""],["Shoes::LogWindow","","classes/Shoes/LogWindow.html","",""],["Shoes::Manual","","classes/Shoes/Manual.html","","<p>The Shoes Manual\n<p>Note: This is meant for displaying and/or producing an html version of the\nmanual from …\n"],["Shoes::Mask","","classes/Shoes/Mask.html","",""],["Shoes::Mouse","","classes/Shoes/Mouse.html","",""],["Shoes::Native","","classes/Shoes/Native.html","",""],["Shoes::NotImplementedError","","classes/Shoes/NotImplementedError.html","",""],["Shoes::Pack","","classes/Shoes/Pack.html","",""],["Shoes::Para","","classes/Shoes/Para.html","",""],["Shoes::Pattern","","classes/Shoes/Pattern.html","",""],["Shoes::Progress","","classes/Shoes/Progress.html","",""],["Shoes::Radio","","classes/Shoes/Radio.html","",""],["Shoes::Search","","classes/Shoes/Search.html","","<p>require ‘ftsearchrt’\n"],["Shoes::SettingUp","","classes/Shoes/SettingUp.html","",""],["Shoes::Setup","","classes/Shoes/Setup.html","",""],["Shoes::Shape","","classes/Shoes/Shape.html","",""],["Shoes::Slider","","classes/Shoes/Slider.html","",""],["Shoes::Span","","classes/Shoes/Span.html","",""],["Shoes::Stack","","classes/Shoes/Stack.html","",""],["Shoes::Strong","","classes/Shoes/Strong.html","",""],["Shoes::Sub","","classes/Shoes/Sub.html","",""],["Shoes::Subtitle","","classes/Shoes/Subtitle.html","",""],["Shoes::Sup","","classes/Shoes/Sup.html","",""],["Shoes::Tagline","","classes/Shoes/Tagline.html","",""],["Shoes::Text","","classes/Shoes/Text.html","",""],["Shoes::TextBlock","","classes/Shoes/TextBlock.html","",""],["Shoes::Timer","","classes/Shoes/Timer.html","",""],["Shoes::TimerBase","","classes/Shoes/TimerBase.html","",""],["Shoes::Title","","classes/Shoes/Title.html","",""],["Shoes::Types","","classes/Shoes/Types.html","",""],["Shoes::Types::App","","classes/Shoes/Types/App.html","",""],["Shoes::Types::Widget","","classes/Shoes/Types/Widget.html","",""],["Shoes::Video","","classes/Shoes/Video.html","",""],["Shoes::VideoError","","classes/Shoes/VideoError.html","",""],["Shoes::Widget","","classes/Shoes/Widget.html","",""],["Shoes::Window","","classes/Shoes/Window.html","",""],["Shy","","classes/Shy.html","",""],["SmartyPantsTest","","classes/SmartyPantsTest.html","",""],["String","","classes/String.html","",""],["Struct","","classes/Struct.html","",""],["Symbol","","classes/Symbol.html","",""],["Tank","","classes/Tank.html","",""],["Time","","classes/Time.html","",""],["TrueClass","","classes/TrueClass.html","",""],["%","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-25","(expr, &blk)",""],["%","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-25","(expr)",""],["*","CP::Vec2","classes/CP/Vec2.html#method-i-2A","(p1)",""],["+","CP::Vec2","classes/CP/Vec2.html#method-i-2B","(p1)",""],["-","CP::Vec2","classes/CP/Vec2.html#method-i-2D","(p1)",""],["-@","CP::Vec2","classes/CP/Vec2.html#method-i-2D-40","()",""],["/","Array","classes/Array.html#method-i-2F","(len)",""],["/","CP::Vec2","classes/CP/Vec2.html#method-i-2F","(p1)",""],["/","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-2F","(*expr,&blk)",""],["/","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-2F","(expr, &blk)",""],["<<","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-3C-3C","(string)",""],["Hpricot","Object","classes/Object.html#method-i-Hpricot","(input = nil, opts = {}, &blk)",""],["JSON","Kernel","classes/Kernel.html#method-i-JSON","(object, opts = {})","<p>If <em>object</em> is string-like parse the string and return the parsed\nresult as a Ruby data structure. Otherwise …\n"],["XML","Hpricot","classes/Hpricot.html#method-c-XML","(input = nil, opts = {}, &blk)","<p>Hpricot::XML parses <em>input</em>, disregarding all the HTML rules and\nreturning a document tree.\n"],["[]","FTSearch::FieldInfos","classes/FTSearch/FieldInfos.html#method-i-5B-5D","(field_name)",""],["[]","FTSearch::SuffixArrayReader::LazyHits","classes/FTSearch/SuffixArrayReader/LazyHits.html#method-i-5B-5D","(i)",""],["[]","Hpricot::Elem::Trav","classes/Hpricot/Elem/Trav.html#method-i-5B-5D","(name)",""],["[]","JSON","classes/JSON.html#method-c-5B-5D","(object, opts = {})","<p>If <em>object</em> is string-like parse the string and return the parsed\nresult as a Ruby data structure. Otherwise …\n"],["[]","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#method-i-5B-5D","( key )","<p>Returns the value with the given key from the context. This is only\navailable to aggregate functions. …\n"],["[]=","Hpricot::Elem::Trav","classes/Hpricot/Elem/Trav.html#method-i-5B-5D-3D","(name, val)",""],["[]=","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#method-i-5B-5D-3D","( key, value )","<p>Sets the value with the given key in the context. This is only available to\naggregate functions.\n"],["__hdr__","Shy","classes/Shy.html#method-c-__hdr__","(f)",""],["a=","CP::Body","classes/CP/Body.html#method-i-a-3D","(p1)",""],["activate_gem","Shoes::Setup","classes/Shoes/Setup.html#method-i-activate_gem","(name, version)",""],["active?","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-active-3F","()","<p>Returns true if the statement is currently active, meaning it has an open\nresult set.\n"],["add_body","CP::Space","classes/CP/Space.html#method-i-add_body","(p1)",""],["add_child","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-add_child","(ele)",""],["add_class","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-add_class","(class_name)","<p>Adds the class to all matched elements.\n\n<pre>(doc/&quot;p&quot;).add_class(&quot;bacon&quot;)</pre>\n<p>Now all paragraphs will have class=“bacon”. …\n"],["add_collision_func","CP::Space","classes/CP/Space.html#method-i-add_collision_func","(p1, p2, &block)",""],["add_custom_formulas","Homebrew","classes/Homebrew.html#method-i-add_custom_formulas","()",""],["add_custom_remote","Homebrew","classes/Homebrew.html#method-i-add_custom_remote","(remote=@remote, remote_url=@remote_url)",""],["add_document","FTSearch::DocumentMapWriter","classes/FTSearch/DocumentMapWriter.html#method-i-add_document","(doc_id, uri)",""],["add_document","FTSearch::FragmentWriter","classes/FTSearch/FragmentWriter.html#method-i-add_document","(doc_hash)",""],["add_document","FTSearch::FulltextWriter","classes/FTSearch/FulltextWriter.html#method-i-add_document","(doc_id, doc_hash, field_mapping, field_infos, suffix_array_writer, doc_map_writer)",""],["add_document","Shoes::Search","classes/Shoes/Search.html#method-i-add_document","(hsh)",""],["add_field","FTSearch::DocumentMapWriter","classes/FTSearch/DocumentMapWriter.html#method-i-add_field","(offset, doc_id, field_id, size)",""],["add_field","FTSearch::FieldInfos","classes/FTSearch/FieldInfos.html#method-i-add_field","(options = {})",""],["add_joint","CP::Space","classes/CP/Space.html#method-i-add_joint","(p1)",""],["add_next_link","Shoes::Manual","classes/Shoes/Manual.html#method-i-add_next_link","(docn, optn)",""],["add_shape","CP::Space","classes/CP/Space.html#method-i-add_shape","(p1)",""],["add_shell","Opp","classes/Opp.html#method-c-add_shell","(shell)",""],["add_static_shape","CP::Space","classes/CP/Space.html#method-i-add_static_shape","(p1)",""],["add_suffixes","FTSearch::SuffixArrayWriter","classes/FTSearch/SuffixArrayWriter.html#method-i-add_suffixes","(analyzer, data, offset)",""],["add_todo","Object","classes/Object.html#method-i-add_todo","(item)",""],["add_translator","SQLite3::Translator","classes/SQLite3/Translator.html#method-i-add_translator","( type )","<p>Add a new translator block, which will be invoked to process type\ntranslations to the given type. The …\n"],["after","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-after","(str = nil, &blk)","<p>Just after each element in this list, add some HTML. Pass in an HTML\n<code>str</code>, which is turned into Hpricot …\n"],["after","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-after","(html = nil, &blk)","<p>Adds elements immediately after this element, contained in the\n<code>html</code> string.\n"],["aim","Tank","classes/Tank.html#method-i-aim","(direction)",""],["alert","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-alert","(msg, quiz=nil)",""],["all_found?","Field","classes/Field.html#method-i-all_found-3F","()",""],["allow_nan?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-allow_nan-3F","()","<p>Returns true, if NaN, Infinity, and -Infinity should be generated,\notherwise returns false.\n"],["answer","Object","classes/Object.html#method-i-answer","(v)",""],["append","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-append","(str = nil, &blk)","<p>Add to the end of the contents inside each element in this list. Pass in an\nHTML <code>str</code>, which is turned …\n"],["append_suffixes","FTSearch::Analysis::SimpleIdentifierAnalyzer","classes/FTSearch/Analysis/SimpleIdentifierAnalyzer.html#method-i-append_suffixes","(array, text, offset)",""],["append_suffixes","FTSearch::Analysis::WhiteSpaceAnalyzer","classes/FTSearch/Analysis/WhiteSpaceAnalyzer.html#method-i-append_suffixes","(array, text, offset)",""],["apply_force","CP::Body","classes/CP/Body.html#method-i-apply_force","(p1, p2)",""],["apply_impulse","CP::Body","classes/CP/Body.html#method-i-apply_impulse","(p1, p2)",""],["array_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-array_nl","()","<p>This string is put at the end of a line that holds a JSON array.\n"],["array_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-array_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON array.\n"],["as","Shoes::Manual","classes/Shoes/Manual.html#method-c-as","(format, *args)",""],["ask","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-ask","(msg)",""],["ask_yes_no","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-ask_yes_no","(msg)",""],["at","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-at","(expr, &blk)","<p>Searches this list for the first element (or child of these elements)\nmatching the CSS or XPath expression …\n"],["at","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-at","(expr)","<p>Find the first matching node for the CSS or XPath <code>expr</code> string.\n"],["attr","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-attr","(key, value = nil, &blk)","<p>Gets and sets attributes on all matched elements.\n<p>Pass in a <code>key</code> on its own and this method will return …\n"],["author","Hpricot::Doc::Trav","classes/Hpricot/Doc/Trav.html#method-i-author","()","<p><code>author</code> searches author and return it as a text. It returns nil\nif not found.\n<p><code>author</code> searchs following …\n"],["authorizer","SQLite3::Database","classes/SQLite3/Database.html#method-i-authorizer","( &block )","<p>Installs (or removes) a block that will be invoked for every access to the\ndatabase. If the block returns …\n"],["authorizer=","SQLite3::Database","classes/SQLite3/Database.html#method-i-authorizer-3D","(p1)","<p>Set the authorizer for this database.  <code>auth</code> must respond to\n<code>call</code>, and <code>call</code> must take 5 arguments.\n<p>Installs …\n"],["auto_vacuum","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-auto_vacuum","()",""],["auto_vacuum=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-auto_vacuum-3D","( mode )",""],["b","CP::BB","classes/CP/BB.html#method-i-b","()",""],["b=","CP::BB","classes/CP/BB.html#method-i-b-3D","(p1)",""],["bb","CP::Shape","classes/CP/Shape.html#method-i-bb","()",""],["before","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-before","(str = nil, &blk)","<p>Add some HTML just previous to each element in this list. Pass in an HTML\n<code>str</code>, which is turned into  …\n"],["before","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-before","(html = nil, &blk)","<p>Adds elements immediately before this element, contained in the\n<code>html</code> string.\n"],["bias_coef","CP","classes/CP.html#method-c-bias_coef","()",""],["bias_coef=","CP","classes/CP.html#method-c-bias_coef-3D","(p1)",""],["bind_param","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-bind_param","(p1, p2)","<p>Binds value to the named (or positional) placeholder. If <code>param</code>\nis a Fixnum, it is treated as an index …\n"],["bind_parameter_count","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-bind_parameter_count","()","<p>Return the number of bind parameters\n"],["bind_params","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-bind_params","( *bind_vars )","<p>Binds the given variables to the corresponding placeholders in the SQL\ntext.\n<p>See Database#execute for …\n"],["block_code","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-block_code","(code, language)",""],["board_at","Othello::Game","classes/Othello/Game.html#method-i-board_at","(c)","<p>Find the value of the board at the given coordinate.\n"],["body","CP::Shape","classes/CP/Shape.html#method-i-body","()",""],["body=","CP::Shape","classes/CP/Shape.html#method-i-body-3D","(p1)",""],["bogusetag?","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-bogusetag-3F","()","<p>Is this object a stranded end tag?\n"],["bombs_left","Field","classes/Field.html#method-i-bombs_left","()",""],["brew_installed?","ShellCommandRunner","classes/ShellCommandRunner.html#method-i-brew_installed-3F","(package)",""],["build","Hpricot","classes/Hpricot.html#method-c-build","(ele = Doc.new, assigns = {}, &blk)",""],["build","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-build","(*a, &b)",""],["bundler","Shoes::Setup","classes/Shoes/Setup.html#method-i-bundler","(options = {})","<p>TODO: add GUI\n<p>Note: this feature is experimental, and uses private Bundler APIs. Don’t\nexpect this to …\n"],["busy_handler","SQLite3::Database","classes/SQLite3/Database.html#method-i-busy_handler","(p1 = v1)","<p>Register a busy handler with this database instance. When a requested\nresource is busy, this handler …\n"],["busy_timeout","SQLite3::Database","classes/SQLite3/Database.html#method-i-busy_timeout","(p1)",""],["busy_timeout=","SQLite3::Database","classes/SQLite3/Database.html#method-i-busy_timeout-3D","(p1)","<p>Indicates that if a request for a resource terminates because that resource\nis busy, SQLite should sleep …\n"],["c","Shy","classes/Shy.html#method-c-c","(path, shy, d, &blk)",""],["cache_bb","CP::Shape","classes/CP/Shape.html#method-i-cache_bb","()",""],["cache_size","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-cache_size","()",""],["cache_size=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-cache_size-3D","( size )",""],["calculate_current_winner","Othello::Game","classes/Othello/Game.html#method-i-calculate_current_winner","()",""],["cc","Make","classes/Make.html#method-i-cc","(t)",""],["changes","SQLite3::Database","classes/SQLite3/Database.html#method-i-changes","()","<p>Returns the number of changes made to this database instance by the last\noperation performed. Note that …\n"],["check_cache_for","DATABASE","classes/DATABASE.html#method-c-check_cache_for","(url)",""],["check_circular?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-check_circular-3F","()","<p>Returns true, if circular data structures should be checked, otherwise\nreturns false.\n"],["check_direction","Othello::Game","classes/Othello/Game.html#method-i-check_direction","(c, dir, piece, opp_piece)",""],["checkout_formula","Homebrew","classes/Homebrew.html#method-i-checkout_formula","(branch, formula)",""],["children_of_type","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-children_of_type","(tag_name)","<p>Find children of a given <code>tag_name</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ele</span>.<span class=\"ruby-identifier\">children_of_type</span>(<span class=\"ruby-string\">'p'</span>)\n  <span class=\"ruby-comment\">#=&gt; [...array of paragraphs...]</span>\n</pre>\n"],["chmod_file","Binject::DMG","classes/Binject/DMG.html#method-i-chmod_file","(p1, p2)",""],["clamp_vect","CP::BB","classes/CP/BB.html#method-i-clamp_vect","(p1)",""],["class_tree","Shoes::Manual","classes/Shoes/Manual.html#method-i-class_tree","()",""],["classes","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-classes","()","<p>Returns a list of CSS classes to which this element belongs.\n"],["clean_path","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-clean_path","(path)",""],["clear","Bloops","classes/Bloops.html#method-i-clear","()",""],["click!","Field","classes/Field.html#method-i-click-21","(x, y)",""],["clock_hand","Object","classes/Object.html#method-i-clock_hand","(time, sw, unit=30, color=black)",""],["close","SQLite3::Database","classes/SQLite3/Database.html#method-i-close","()","<p>Closes this database.\n"],["close","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-i-close","()","<p>Closes the statement that spawned this result set. <em>Use with\ncaution!</em> Closing a result set will automatically …\n"],["close","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-close","()","<p>Closes the statement by finalizing the underlying statement handle. The\nstatement must not be used after …\n"],["closed?","SQLite3::Database","classes/SQLite3/Database.html#method-i-closed-3F","()","<p>Returns <code>true</code> if this database instance has been closed (see\n#close).\n"],["closed?","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-i-closed-3F","()","<p>Queries whether the underlying statement has been closed or not.\n"],["closed?","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-closed-3F","()","<p>Returns true if the statement has been closed.\n"],["code","SQLite3::Exception","classes/SQLite3/Exception.html#method-c-code","()","<p>The numeric error code that this exception represents.\n"],["code","SQLite3::Exception","classes/SQLite3/Exception.html#method-i-code","()","<p>A convenience for accessing the error code for this exception.\n"],["codespan","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-codespan","(code)",""],["collide_and_stop","Tank","classes/Tank.html#method-i-collide_and_stop","()",""],["collision_slop","CP","classes/CP.html#method-c-collision_slop","()",""],["collision_slop=","CP","classes/CP.html#method-c-collision_slop-3D","(p1)",""],["collision_type","CP::Shape","classes/CP/Shape.html#method-i-collision_type","()",""],["collision_type=","CP::Shape","classes/CP/Shape.html#method-i-collision_type-3D","(p1)",""],["color_page","Shoes::Manual","classes/Shoes/Manual.html#method-i-color_page","()",""],["column_count","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-column_count","()","<p>Returns the number of columns to be returned for this statement\n"],["column_decltype","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-column_decltype","(p1)","<p>Get the column type at <code>index</code>.  0 based.\n"],["column_name","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-column_name","(p1)","<p>Get the column name at <code>index</code>.  0 based.\n"],["columns","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-i-columns","()","<p>Returns the names of the columns returned by this result set.\n"],["columns","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-columns","()","<p>Return an array of the column names for this statement. Note that this may\nexecute the statement in order …\n"],["comment?","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-comment-3F","()","<p>Is this object a comment?\n"],["commit","SQLite3::Database","classes/SQLite3/Database.html#method-i-commit","()","<p>Commits the current transaction. If there is no current transaction, this\nwill cause an error to be raised. …\n"],["common_build","Make","classes/Make.html#method-i-common_build","()",""],["complete?","SQLite3::Database","classes/SQLite3/Database.html#method-i-complete-3F","(p1)","<p>Return <code>true</code> if the string is a valid (ie, parsable) SQL\nstatement, and <code>false</code> otherwise.\n"],["complete_todo","Object","classes/Object.html#method-i-complete_todo","(item)",""],["concat","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-concat","(string)",""],["configure","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-configure","(p1)",""],["containers","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-containers","()","<p>Return all children of this node which can contain other nodes.  This is a\ngood way to get all HTML elements …\n"],["contains?","Collisions","classes/Collisions.html#method-i-contains-3F","(x, y)",""],["context","FTSearch::SuffixArrayReader::Hit","classes/FTSearch/SuffixArrayReader/Hit.html#method-i-context","(size)",""],["copy_deps_to_dist","MakeDarwin","classes/MakeDarwin.html#method-c-copy_deps_to_dist","()",""],["copy_deps_to_dist","MakeLinux","classes/MakeLinux.html#method-c-copy_deps_to_dist","()",""],["copy_deps_to_dist","MakeMinGW","classes/MakeMinGW.html#method-c-copy_deps_to_dist","()",""],["copy_ext","MakeDarwin","classes/MakeDarwin.html#method-c-copy_ext","(xdir, libdir)",""],["copy_ext","MakeLinux","classes/MakeLinux.html#method-c-copy_ext","(xdir, libdir)",""],["copy_ext","MakeMinGW","classes/MakeMinGW.html#method-c-copy_ext","(xdir, libdir)",""],["copy_files","Make","classes/Make.html#method-i-copy_files","(glob, dir)",""],["copy_files_to_dist","Make","classes/Make.html#method-i-copy_files_to_dist","()",""],["count","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#method-i-count","()","<p>(Only available to aggregate functions.) Returns the number of rows that\nthe aggregate has processed …\n"],["count_hits","FTSearch::SuffixArrayReader","classes/FTSearch/SuffixArrayReader.html#method-i-count_hits","(term)",""],["cp_line","ChipMunk","classes/ChipMunk.html#method-i-cp_line","(x0, y0, x1, y1, opts = {})",""],["cp_move","Object","classes/Object.html#method-i-cp_move","()",""],["cp_oval","ChipMunk","classes/ChipMunk.html#method-i-cp_oval","(l, t, r, opts = {})",""],["cp_space","ChipMunk","classes/ChipMunk.html#method-i-cp_space","()",""],["create_aggregate","SQLite3::Database","classes/SQLite3/Database.html#method-i-create_aggregate","( name, arity, step=nil, finalize=nil, text_rep=Constants::TextRep::ANY, &block )","<p>Creates a new aggregate function for use in SQL statements. Aggregate\nfunctions are functions that apply …\n"],["create_aggregate_handler","SQLite3::Database","classes/SQLite3/Database.html#method-i-create_aggregate_handler","( handler )","<p>This is another approach to creating an aggregate function (see\n#create_aggregate). Instead of explicitly …\n"],["create_function","SQLite3::Database","classes/SQLite3/Database.html#method-i-create_function","(name, arity, text_rep=Constants::TextRep::ANY, &block)","<p>Creates a new function for use in SQL statements. It will be added as\n<code>name</code>, with the given <code>arity</code>. (For …\n"],["cross","CP::Vec2","classes/CP/Vec2.html#method-i-cross","(p1)",""],["css_path","Hpricot::Doc::Trav","classes/Hpricot/Doc/Trav.html#method-i-css_path","()",""],["css_path","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-css_path","()","<p>Builds a unique CSS string for this node, from the root of the document\ncontaining it.\n"],["current_player","Othello::Game","classes/Othello/Game.html#method-i-current_player","()",""],["custom_formulas","Homebrew","classes/Homebrew.html#method-i-custom_formulas","()",""],["czf","Shy","classes/Shy.html#method-c-czf","(f, d, &blk)",""],["damped_spring","CP","classes/CP.html#method-c-damped_spring","(p1, p2, p3, p4, p5, p6, p7, p8)",""],["damping","CP::Space","classes/CP/Space.html#method-i-damping","()",""],["damping=","CP::Space","classes/CP/Space.html#method-i-damping-3D","(p1)",""],["data","FTSearch::InMemoryWriter","classes/FTSearch/InMemoryWriter.html#method-i-data","()",""],["data_path","Object","classes/Object.html#method-i-data_path","()",""],["database_list","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-database_list","( )",""],["database_name","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-database_name","(p1)","<p>Return the database name for the column at <code>column_index</code>\n"],["dead?","Life","classes/Life.html#method-i-dead-3F","()",""],["default_cache_size","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-default_cache_size","()",""],["default_cache_size=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-default_cache_size-3D","( size )",""],["default_synchronous","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-default_synchronous","()",""],["default_synchronous=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-default_synchronous-3D","( mode )",""],["default_temp_store","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-default_temp_store","()",""],["default_temp_store=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-default_temp_store-3D","( mode )",""],["define_aggregator","SQLite3::Database","classes/SQLite3/Database.html#method-i-define_aggregator","(p1, p2)","<p>Define an aggregate function named <code>name</code> using the object\n<code>aggregator</code>. <code>aggregator</code> must respond to\n<code>step</code> …\n"],["define_function","SQLite3::Database","classes/SQLite3/Database.html#method-i-define_function","(p1)","<p>Define a function named <code>name</code> with <code>args</code>.  The\narity of the block will be used as the arity for the function …\n"],["dewikify","Shoes::Manual","classes/Shoes/Manual.html#method-i-dewikify","(str, intro = false)",""],["dewikify_code","Shoes::Manual","classes/Shoes/Manual.html#method-i-dewikify_code","(str)",""],["dewikify_hi","Shoes::Manual","classes/Shoes/Manual.html#method-i-dewikify_hi","(str, terms, intro = false)",""],["dewikify_p","Shoes::Manual","classes/Shoes/Manual.html#method-i-dewikify_p","(ele, str, *args)",""],["dmg","Shoes::Pack","classes/Shoes/Pack.html#method-c-dmg","(script, opt, &blk)",""],["doc?","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-doc-3F","()","<p>Is this object the enclosing HTML or XML document?\n"],["doctype","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-doctype","(target, pub, sys)",""],["doctype?","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-doctype-3F","()","<p>Is this object a doctype tag?\n"],["document_id","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-document_id","(suffix_idx, offset)",""],["document_id_to_uri","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-document_id_to_uri","(doc_id)",""],["document_uri","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-document_uri","(suffix_idx, offset)",""],["documents","FTSearch::FragmentWriter","classes/FTSearch/FragmentWriter.html#method-i-documents","()",""],["done","Gem::ShoesFace::ProgressReporter","classes/Gem/ShoesFace/ProgressReporter.html#method-i-done","()",""],["done","Gem::ShoesFace::SilentDownloadReporter","classes/Gem/ShoesFace/SilentDownloadReporter.html#method-i-done","()",""],["done?","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-done-3F","()","<p>returns true if all rows have been returned.\n"],["dot","CP::Vec2","classes/CP/Vec2.html#method-i-dot","(p1)",""],["double_emphasis","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-double_emphasis","(text)",""],["download_reporter","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-download_reporter","(*args)",""],["draw","Building","classes/Building.html#method-i-draw","()",""],["draw","Shell","classes/Shell.html#method-i-draw","()",""],["draw","Tank","classes/Tank.html#method-i-draw","()",""],["draw_background","Object","classes/Object.html#method-i-draw_background","()",""],["draw_board","Othello","classes/Othello.html#method-i-draw_board","()",""],["draw_opp_box","Opp","classes/Opp.html#method-c-draw_opp_box","(left, right, top, bottom, front, back, occlude = true)","<p>here “front” and “back” push the rect into and out of the window. 1.0 means\nyour …\n"],["draw_opp_oval","Opp","classes/Opp.html#method-c-draw_opp_oval","(left, right, top, bottom, depth)",""],["draw_opp_plane","Opp","classes/Opp.html#method-c-draw_opp_plane","(x1, y1, x2, y2, front, back, stroke_color)",""],["draw_opp_rect","Opp","classes/Opp.html#method-c-draw_opp_rect","(left, right, top, bottom, depth, angle, with_x = false)",""],["draw_player_1","Othello","classes/Othello.html#method-i-draw_player_1","(first_turn=false)",""],["draw_player_2","Othello","classes/Othello.html#method-i-draw_player_2","(first_turn=false)",""],["du","Shy","classes/Shy.html#method-c-du","(root)",""],["dump","JSON","classes/JSON.html#method-i-dump","(obj, anIO = nil, limit = nil)","<p>Dumps <em>obj</em> as a JSON string, i.e. calls generate on the object and\nreturns the result.\n<p>If anIO (an IO like …\n"],["dump_data","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-dump_data","()",""],["dump_data","FTSearch::FulltextReader","classes/FTSearch/FulltextReader.html#method-i-dump_data","(&block)",""],["dump_data","FTSearch::SuffixArrayReader","classes/FTSearch/SuffixArrayReader.html#method-i-dump_data","()",""],["e","CP::Shape","classes/CP/Shape.html#method-i-e","()",""],["e=","CP::Shape","classes/CP/Shape.html#method-i-e-3D","(p1)",""],["each","FTSearch::SuffixArrayReader::LazyHits","classes/FTSearch/SuffixArrayReader/LazyHits.html#method-i-each","()",""],["each","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-i-each","( &block )","<p>Required by the Enumerable mixin. Provides an internal iterator over the\nrows of the result set.\n"],["each","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-each","()",""],["each_child","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-each_child","()","<p><code>each_child</code> iterates over each child.\n"],["each_child_with_index","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-each_child_with_index","()","<p><code>each_child_with_index</code> iterates over each child.\n"],["each_hyperlink","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-each_hyperlink","()","<p><code>each_hyperlink</code> traverses hyperlinks such as HTML href\nattribute of A element.\n<p>It yields Hpricot::Text …\n"],["each_hyperlink_uri","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-each_hyperlink_uri","(base_uri=nil)","<p><code>each_hyperlink_uri</code> traverses hyperlinks such as HTML href\nattribute of A element.\n<p>It yields Hpricot::Text …\n"],["each_uri","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-each_uri","(base_uri=nil)","<p><code>each_uri</code> traverses hyperlinks such as HTML href attribute of A\nelement.\n<p>It yields URI for each hyperlink. …\n"],["east","Tank","classes/Tank.html#method-i-east","()",""],["elastic_iterations","CP::Space","classes/CP/Space.html#method-i-elastic_iterations","()",""],["elastic_iterations=","CP::Space","classes/CP/Space.html#method-i-elastic_iterations-3D","(p1)",""],["elem?","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-elem-3F","()","<p>Is this object an HTML or XML element?\n"],["emphasis","CustomRenderTest::SimpleRender","classes/CustomRenderTest/SimpleRender.html#method-i-emphasis","(text)",""],["emphasis","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-emphasis","(text)",""],["empty","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-empty","()","<p>Empty the elements in this list, by removing their insides.\n\n<pre>doc = Hpricot(&quot;&lt;p&gt; We have &lt;i&gt;so much&lt;/i&gt; ...</pre>\n"],["enable_load_extension","SQLite3::Database","classes/SQLite3/Database.html#method-i-enable_load_extension","(p1)","<p>Enable or disable extension loading.\n"],["encoding","SQLite3::Database","classes/SQLite3/Database.html#method-i-encoding","()","<p>Fetch the encoding set on this database\n"],["env","Make","classes/Make.html#method-i-env","(x)","<p>Check the environment\n"],["eof?","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-i-eof-3F","()","<p>Query whether the cursor has reached the end of the result set or not.\n"],["errcode","SQLite3::Database","classes/SQLite3/Database.html#method-i-errcode","()","<p>Return an integer representing the last error to have occurred with this\ndatabase.\n"],["errmsg","SQLite3::Database","classes/SQLite3/Database.html#method-i-errmsg","()","<p>Return a string describing the last error to have occurred with this\ndatabase.\n"],["error","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-error","(msg, e)",""],["exe","Shoes::Pack","classes/Shoes/Pack.html#method-c-exe","(script, opt, &blk)",""],["execute","SQLite3::Database","classes/SQLite3/Database.html#method-i-execute","(sql, bind_vars = [], *args, &block)","<p>Executes the given SQL statement. If additional parameters are given, they\nare treated as bind variables, …\n"],["execute","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-execute","( *bind_vars )","<p>Execute the statement. This creates a new ResultSet object for the\nstatement’s virtual machine. If a …\n"],["execute!","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-execute-21","( *bind_vars, &block )","<p>Execute the statement. If no block was given, this returns an array of rows\nreturned by executing the …\n"],["execute2","SQLite3::Database","classes/SQLite3/Database.html#method-i-execute2","( sql, *bind_vars )","<p>Executes the given SQL statement, exactly as with #execute. However, the\nfirst row returned (either via …\n"],["execute_batch","SQLite3::Database","classes/SQLite3/Database.html#method-i-execute_batch","( sql, bind_vars = [], *args )","<p>Executes all SQL statements in the given string. By contrast, the other\nmeans of executing queries will …\n"],["expand","Hpricot::Elements","classes/Hpricot/Elements.html#method-c-expand","(ele1, ele2, excl=false)","<p>Given two elements, attempt to gather an Elements array of everything\nbetween (and including) those two …\n"],["expand","MenuPanel","classes/MenuPanel.html#method-i-expand","()",""],["extended","Override","classes/Override.html#method-c-extended","(mod)",""],["f=","CP::Body","classes/CP/Body.html#method-i-f-3D","(p1)",""],["fast_generate","JSON","classes/JSON.html#method-i-fast_generate","(obj)","<p>Unparse the Ruby data structure <em>obj</em> into a single line JSON string\nand return it. This method disables …\n"],["fast_xs","String","classes/String.html#method-i-fast_xs","()",""],["fetch","Gem::ShoesFace::SilentDownloadReporter","classes/Gem/ShoesFace/SilentDownloadReporter.html#method-i-fetch","(filename, filesize)",""],["field_id","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-field_id","(suffix_idx, offset)",""],["field_id","FTSearch::FragmentWriter","classes/FTSearch/FragmentWriter.html#method-i-field_id","(field)",""],["field_info","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-field_info","(suffix_idx, offset)",""],["field_size","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-field_size","(suffix_idx, offset)",""],["fields","FTSearch::FragmentWriter","classes/FTSearch/FragmentWriter.html#method-i-fields","()",""],["filter","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-filter","(&block)","<p><code>filter</code> rebuilds the tree without some components.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">filter</span> {<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">descendant_node</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">predicate</span> } <span class=\"ruby-operator\">-</span><span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">node</span>\n<span class=\"ruby-identifier\">loc</span>.<span class=\"ruby-identifier\">filter</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["filter","Hpricot::Elements","classes/Hpricot/Elements.html#method-c-filter","(nodes, expr, truth = true)",""],["filter","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-filter","(expr)",""],["filter","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-c-filter","(tok, &blk)",""],["finalize","SQLite3::Database","classes/SQLite3/Database.html#method-i-finalize","()",""],["finalize","SQLite3::Database","classes/SQLite3/Database.html#method-c-finalize","( &block )",""],["find_all","FTSearch::SuffixArrayReader","classes/FTSearch/SuffixArrayReader.html#method-i-find_all","(term)",""],["find_all","Shoes::Search","classes/Shoes/Search.html#method-i-find_all","(terms, show = 20, prob_sort = false)",""],["find_and_copy","MakeLinux","classes/MakeLinux.html#method-c-find_and_copy","(thelib,newplace)",""],["find_element","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-find_element","(*names)","<p><code>find_element</code> searches an element which universal name is\nspecified by the arguments.  It returns nil …\n"],["find_first","FTSearch::SuffixArrayReader","classes/FTSearch/SuffixArrayReader.html#method-i-find_first","(term)",""],["find_next","FTSearch::SuffixArrayReader","classes/FTSearch/SuffixArrayReader.html#method-i-find_next","(hit)",""],["find_piece","Othello","classes/Othello.html#method-i-find_piece","(x,y)",""],["find_suffixes","FTSearch::Analysis::Analyzer","classes/FTSearch/Analysis/Analyzer.html#method-i-find_suffixes","(text)",""],["finish!","FTSearch::DocumentMapWriter","classes/FTSearch/DocumentMapWriter.html#method-i-finish-21","()",""],["finish!","FTSearch::FragmentWriter","classes/FTSearch/FragmentWriter.html#method-i-finish-21","()",""],["finish!","FTSearch::FulltextWriter","classes/FTSearch/FulltextWriter.html#method-i-finish-21","()",""],["finish!","FTSearch::SuffixArrayWriter","classes/FTSearch/SuffixArrayWriter.html#method-i-finish-21","(fulltext)",""],["finish!","Shoes::Search","classes/Shoes/Search.html#method-i-finish-21","()",""],["fire","Tank","classes/Tank.html#method-i-fire","()",""],["flag!","Field","classes/Field.html#method-i-flag-21","(x, y)",""],["following","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-following","()","<p>Find all nodes which follow the current one.\n"],["following_siblings","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-following_siblings","()","<p>Find sibling elements which follow the current one.   Like the other\n“sibling” methods, this …\n"],["foreign_key_list","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-foreign_key_list","( table )",""],["forget","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-forget","(p1)","<p>Forget <em>object</em> for this generating run.\n"],["forget_todo","Object","classes/Object.html#method-i-forget_todo","(item)",""],["from_state","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-c-from_state","(p1)","<p>Creates a State object from <em>opts</em>, which ought to be Hash to create\na new State instance configured by …\n"],["full_column_names","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-full_column_names","()",""],["full_column_names=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-full_column_names-3D","( mode )",""],["game_over?","Field","classes/Field.html#method-i-game_over-3F","()",""],["gem","Shoes::Setup","classes/Shoes/Setup.html#method-i-gem","(name, version = nil)",""],["gem_reset","Shoes::Setup","classes/Shoes/Setup.html#method-c-gem_reset","()",""],["generate","JSON","classes/JSON.html#method-i-generate","(obj, state = nil)","<p>Unparse the Ruby data structure <em>obj</em> into a single line JSON string\nand return it. <em>state</em> is\n<p>a JSON::State …\n"],["get_attribute","Hpricot::Elem::Trav","classes/Hpricot/Elem/Trav.html#method-i-get_attribute","(name)",""],["get_data","FTSearch::FulltextReader","classes/FTSearch/FulltextReader.html#method-i-get_data","(offset, size)",""],["get_dylibs","MakeDarwin","classes/MakeDarwin.html#method-c-get_dylibs","(lib)","<p>Get a list of linked libraries for lib (discard the non-indented lines)\n"],["get_element_by_id","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-get_element_by_id","(id)",""],["get_elements_by_tag_name","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-get_elements_by_tag_name","(*a)",""],["get_first_row","SQLite3::Database","classes/SQLite3/Database.html#method-i-get_first_row","( sql, *bind_vars )","<p>A convenience method for obtaining the first row of a result set, and\ndiscarding all others. It is otherwise …\n"],["get_first_value","SQLite3::Database","classes/SQLite3/Database.html#method-i-get_first_value","( sql, *bind_vars )","<p>A convenience method for obtaining the first value of the first row of a\nresult set, and discarding all …\n"],["get_subnode","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-get_subnode","(*indexes)",""],["git_fetch","ShellCommandRunner","classes/ShellCommandRunner.html#method-i-git_fetch","(remote)",""],["git_remote_add","ShellCommandRunner","classes/ShellCommandRunner.html#method-i-git_remote_add","(remote, remote_url)",""],["git_remote_rm","ShellCommandRunner","classes/ShellCommandRunner.html#method-i-git_remote_rm","(remote)",""],["git_repo_has_remote?","ShellCommandRunner","classes/ShellCommandRunner.html#method-i-git_repo_has_remote-3F","(remote)",""],["gravity","CP::Space","classes/CP/Space.html#method-i-gravity","()",""],["gravity=","CP::Space","classes/CP/Space.html#method-i-gravity-3D","(p1)",""],["group","CP::Shape","classes/CP/Shape.html#method-i-group","()",""],["group=","CP::Shape","classes/CP/Shape.html#method-i-group-3D","(p1)",""],["grow","Binject::DMG","classes/Binject/DMG.html#method-i-grow","(p1)",""],["guidance_system","Guidance","classes/Guidance.html#method-i-guidance_system","(x, y, dest_x, dest_y, angle)",""],["has_attribute?","Hpricot::Elem::Trav","classes/Hpricot/Elem/Trav.html#method-i-has_attribute-3F","(name)",""],["head","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-head","(*args, &block)","<p>Builds a head tag.  Adds a <code>meta</code> tag inside with Content-Type\nset to <code>text/html; charset=utf-8</code>.\n"],["header","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-header","(title, level)",""],["hide","Hpricot::BlankSlate","classes/Hpricot/BlankSlate.html#method-c-hide","(name)","<p>Hide the method named <code>name</code> in the BlankSlate class.  Don’t\nhide <code>instance_eval</code> or any method beginning …\n"],["hpricot_slate_method_added","Kernel","classes/Kernel.html#method-c-hpricot_slate_method_added","(name)",""],["hpricot_slate_method_added","Object","classes/Object.html#method-c-hpricot_slate_method_added","(name)",""],["hrun","Shy","classes/Shy.html#method-c-hrun","(f)",""],["html","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-html","(*string)",""],["html","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-html","(inner = nil, &blk)","<p>Builds an HTML string from the contents of this node.\n"],["html=","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-html-3D","(string)",""],["html_equal","Object","classes/Object.html#method-i-html_equal","(html_a, html_b)",""],["html_tag","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-html_tag","(sym, *args, &block)","<p>Every HTML tag method goes through an html_tag call.  So, calling\n<code>div</code> is equivalent to calling <code>html_tag</code> …\n"],["hurt","Life","classes/Life.html#method-i-hurt","(damage)",""],["i=","CP::Body","classes/CP/Body.html#method-i-i-3D","(p1)",""],["incident","Book","classes/Book.html#method-i-incident","(num)",""],["included","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-c-included","(p1)","<p>Extends <em>modul</em> with the String::Extend module.\n"],["indent","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-indent","()","<p>This string is used to indent levels in the JSON text.\n"],["indent=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-indent-3D","(p1)","<p>This string is used to indent levels in the JSON text.\n"],["index","Book","classes/Book.html#method-i-index","()",""],["index","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-index","(name)",""],["index_info","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-index_info","( index )",""],["index_list","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-index_list","( table )",""],["index_page","Shoes::Manual","classes/Shoes/Manual.html#method-i-index_page","()",""],["inherited","Shoes::Types::Widget","classes/Shoes/Types/Widget.html#method-c-inherited","(subc)",""],["init","Shoes::Setup","classes/Shoes/Setup.html#method-c-init","()",""],["initialize_in_memory_buffer","FTSearch::InMemoryWriter","classes/FTSearch/InMemoryWriter.html#method-i-initialize_in_memory_buffer","()",""],["inject","Binject::EXE","classes/Binject/EXE.html#method-i-inject","(p1, p2)",""],["inject_dir","Binject::DMG","classes/Binject/DMG.html#method-i-inject_dir","(p1, p2)",""],["inject_file","Binject::DMG","classes/Binject/DMG.html#method-i-inject_file","(p1, p2)",""],["innerHTML","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-innerHTML","(*string)",""],["innerHTML","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-innerHTML","(inner = nil, &blk)",""],["innerHTML=","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-innerHTML-3D","(string)",""],["innerHTML=","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-innerHTML-3D","(inner)",""],["innerText","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-innerText","()",""],["inner_html","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-inner_html","(*string)","<p>Returns an HTML fragment built of the contents of each element in this\nlist.\n<p>If a HTML <code>string</code> is supplied, …\n"],["inner_html","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-inner_html","(inner = nil, &blk)",""],["inner_html=","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-inner_html-3D","(string)","<p>Replaces the contents of each element in this list.  Supply an HTML\n<code>string</code>, which is loaded into Hpricot …\n"],["inner_html=","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-inner_html-3D","(inner)","<p>Inserts new contents into the current node, based on the HTML contained in\nstring <code>inner</code>.\n"],["inner_text","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-inner_text","()","<p>Returns an string containing the text contents of each element in this\nlist. All HTML tags are removed. …\n"],["inner_text","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-inner_text","()","<p>Builds a string from the text contained in this node.  All HTML elements\nare removed.\n"],["insert_after","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-insert_after","(nodes, ele)","<p>Insert <code>nodes</code>, an array of HTML elements or a single element,\nafter the node <code>ele</code>, a child of the current …\n"],["insert_before","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-insert_before","(nodes, ele)","<p>Insert <code>nodes</code>, an array of HTML elements or a single element,\nbefore the node <code>ele</code>, a child of the current …\n"],["inspect","Array","classes/Array.html#method-i-inspect","(hits = {})",""],["inspect","File","classes/File.html#method-i-inspect","(hits = nil)",""],["inspect","Hash","classes/Hash.html#method-i-inspect","(hits = {})",""],["inspect","Kernel","classes/Kernel.html#method-i-inspect","(hits = {})",""],["inspect","Proc","classes/Proc.html#method-i-inspect","(hits = nil)",""],["inspect","Shoes::Types::App","classes/Shoes/Types/App.html#method-i-inspect","(hits = nil)",""],["install","Homebrew","classes/Homebrew.html#method-i-install","(package, args=\"\")",""],["install_packages","Homebrew","classes/Homebrew.html#method-i-install_packages","()",""],["install_sources","Shoes::Setup","classes/Shoes/Setup.html#method-c-install_sources","()",""],["installed?","Homebrew","classes/Homebrew.html#method-i-installed-3F","(package)",""],["integrity_check","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-integrity_check","()","<p>Does an integrity check on the database. If the check fails, a\nSQLite3::Exception will be raised. Otherwise …\n"],["interrupt","SQLite3::Database","classes/SQLite3/Database.html#method-i-interrupt","()","<p>Interrupts the currently executing operation, causing it to abort.\n"],["intersect?","CP::BB","classes/CP/BB.html#method-i-intersect-3F","(p1)",""],["intersects?","Collisions","classes/Collisions.html#method-i-intersects-3F","(other)",""],["items","Comic","classes/Comic.html#method-i-items","()",""],["iterations","CP::Space","classes/CP/Space.html#method-i-iterations","()",""],["iterations=","CP::Space","classes/CP/Space.html#method-i-iterations-3D","(p1)",""],["j","Kernel","classes/Kernel.html#method-i-j","(*objs)","<p>Outputs <em>objs</em> to STDOUT as JSON strings in the shortest form, that\nis in one line.\n"],["jj","Kernel","classes/Kernel.html#method-i-jj","(*objs)","<p>Ouputs <em>objs</em> to STDOUT as JSON strings in a pretty format, with\nindentation and over many lines.\n"],["json_creatable?","Class","classes/Class.html#method-i-json_creatable-3F","()","<p>Returns true, if this class can be used to create an instance from a\nserialised JSON string. The class …\n"],["json_create","Date","classes/Date.html#method-c-json_create","(object)",""],["json_create","DateTime","classes/DateTime.html#method-c-json_create","(object)",""],["json_create","Exception","classes/Exception.html#method-c-json_create","(object)",""],["json_create","JSON::Ext::Generator::GeneratorMethods::String::Extend","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html#method-i-json_create","(p1)","<p>Raw Strings are JSON Objects (the raw bytes are stored in an array for the\nkey “raw”). The …\n"],["json_create","Object","classes/Object.html#method-c-json_create","(object)",""],["json_create","Range","classes/Range.html#method-c-json_create","(object)",""],["json_create","Regexp","classes/Regexp.html#method-c-json_create","(object)",""],["json_create","Struct","classes/Struct.html#method-c-json_create","(object)",""],["json_create","Time","classes/Time.html#method-c-json_create","(object)",""],["keep_in_frame","Object","classes/Object.html#method-i-keep_in_frame","(frame_max, object_size, starting_point, position)",""],["l","CP::BB","classes/CP/BB.html#method-i-l","()",""],["l=","CP::BB","classes/CP/BB.html#method-i-l-3D","(p1)",""],["last_insert_row_id","SQLite3::Database","classes/SQLite3/Database.html#method-i-last_insert_row_id","()","<p>Obtains the unique row ID of the last row to be inserted by this Database\ninstance.\n"],["latest_image","Comic","classes/Comic.html#method-i-latest_image","()",""],["launchable","Shy","classes/Shy.html#method-c-launchable","(d)",""],["lay_initial_pieces","Othello::Game","classes/Othello/Game.html#method-i-lay_initial_pieces","()","<p>Lay the initial 4 pieces in the middle\n"],["lay_piece","Othello::Game","classes/Othello/Game.html#method-i-lay_piece","(c=[0,0], check_adjacent_pieces=true)",""],["layers","CP::Shape","classes/CP/Shape.html#method-i-layers","()",""],["layers=","CP::Shape","classes/CP/Shape.html#method-i-layers-3D","(p1)",""],["lazyhits_to_offsets","FTSearch::SuffixArrayReader","classes/FTSearch/SuffixArrayReader.html#method-i-lazyhits_to_offsets","(lazyhits)",""],["left_top_corner_of_piece","Othello","classes/Othello.html#method-i-left_top_corner_of_piece","(a,b)",""],["length","CP::Vec2","classes/CP/Vec2.html#method-i-length","()",""],["length","SQLite3::Value","classes/SQLite3/Value.html#method-i-length","( utf16=false )",""],["lengthsq","CP::Vec2","classes/CP/Vec2.html#method-i-lengthsq","()",""],["libversion","SQLite3","classes/SQLite3.html#method-c-libversion","()",""],["linebreak","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-linebreak","()",""],["link","Homebrew","classes/Homebrew.html#method-i-link","(package)",""],["link","Shoes::Manual","classes/Shoes/Manual.html#method-c-link","(sect)",""],["linux","Shoes::Pack","classes/Shoes/Pack.html#method-c-linux","(script, opt, &blk)",""],["list","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-list","(content, list_type)",""],["list_item","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-list_item","(content, list_type)",""],["load","Bloops","classes/Bloops.html#method-i-load","(p1)",""],["load","JSON","classes/JSON.html#method-i-load","(source, proc = nil)","<p>Load a ruby data structure from a JSON <em>source</em> and return it. A\nsource can either be a string-like object, …\n"],["load","Object","classes/Object.html#method-i-load","()",""],["load_docs","Shoes::Manual","classes/Shoes/Manual.html#method-i-load_docs","(path)",""],["load_extension","SQLite3::Database","classes/SQLite3/Database.html#method-i-load_extension","(p1)","<p>Loads an SQLite extension library from the named file. Extension loading\nmust be enabled using db.enable_load_extension …\n"],["load_list","Object","classes/Object.html#method-i-load_list","()",""],["load_note","Object","classes/Object.html#method-i-load_note","(note = ['New Note', ''])",""],["local2world","CP::Body","classes/CP/Body.html#method-i-local2world","(p1)",""],["m=","CP::Body","classes/CP/Body.html#method-i-m-3D","(p1)",""],["make","Gem::Ext::ExtConfBuilder","classes/Gem/Ext/ExtConfBuilder.html#method-c-make","(dest_path, results)",""],["make","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-make","(input = nil, &blk)","<p>Parses an HTML string, making an HTML fragment based on the options used to\ncreate the container document. …\n"],["make__","Gem::Ext::ExtConfBuilder","classes/Gem/Ext/ExtConfBuilder.html#method-c-make__","(dest_path, results)",""],["make_app","MakeDarwin","classes/MakeDarwin.html#method-c-make_app","(name)",""],["make_app","MakeLinux","classes/MakeLinux.html#method-c-make_app","(name)",""],["make_app","MakeMinGW","classes/MakeMinGW.html#method-c-make_app","(name)",""],["make_html","Shoes::Manual","classes/Shoes/Manual.html#method-i-make_html","(path, title, menu, &blk)",""],["make_inspect","Class","classes/Class.html#method-i-make_inspect","(m = :inspect)",""],["make_installer","MakeDarwin","classes/MakeDarwin.html#method-c-make_installer","()",""],["make_installer","MakeLinux","classes/MakeLinux.html#method-c-make_installer","()",""],["make_installer","MakeMinGW","classes/MakeMinGW.html#method-c-make_installer","()",""],["make_resource","MakeMinGW","classes/MakeMinGW.html#method-c-make_resource","(t)",""],["make_so","MakeDarwin","classes/MakeDarwin.html#method-c-make_so","(name)",""],["make_so","MakeLinux","classes/MakeLinux.html#method-c-make_so","(name)",""],["make_so","MakeMinGW","classes/MakeMinGW.html#method-c-make_so","(name)",""],["make_stub","MakeDarwin","classes/MakeDarwin.html#method-c-make_stub","()",""],["manual_search","Shoes::Manual","classes/Shoes/Manual.html#method-i-manual_search","(terms)",""],["max_nesting","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-max_nesting","()","<p>This integer returns the maximum level of data structure nesting in the\ngenerated JSON, max_nesting = …\n"],["max_nesting=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-max_nesting-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON\nto the integer depth, max_nesting …\n"],["md5sum","Shy","classes/Shy.html#method-c-md5sum","(path)",""],["memorize_board","Othello::Game","classes/Othello/Game.html#method-i-memorize_board","()",""],["merge","FTSearch::DocumentMapWriter","classes/FTSearch/DocumentMapWriter.html#method-i-merge","(doc_map_reader)",""],["merge","FTSearch::FragmentWriter","classes/FTSearch/FragmentWriter.html#method-i-merge","(fragment_directory)",""],["merge","FTSearch::FulltextWriter","classes/FTSearch/FulltextWriter.html#method-i-merge","(fulltext_reader)",""],["merge","FTSearch::SuffixArrayWriter","classes/FTSearch/SuffixArrayWriter.html#method-i-merge","(suffix_array_reader)",""],["meta","Shy","classes/Shy.html#method-c-meta","(path, d = \".\")",""],["method_added","Kernel","classes/Kernel.html#method-c-method_added","(name)","<p>Detect method additions to Kernel and remove them in the BlankSlate class.\n"],["method_added","Object","classes/Object.html#method-c-method_added","(name)","<p>Detect method additions to Object and remove them in the BlankSlate class.\n"],["method_missing","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-method_missing","(*args)",""],["method_missing","Hpricot::CssProxy","classes/Hpricot/CssProxy.html#method-i-method_missing","(id_or_class, *args, &block)","<p>Adds attributes to an element.  Bang methods set the :id attribute. Other\nmethods add to the :class attribute. …\n"],["moment_for_circle","CP","classes/CP.html#method-c-moment_for_circle","(p1, p2, p3, p4)",""],["moment_for_poly","CP","classes/CP.html#method-c-moment_for_poly","(p1, p2, p3)",""],["near?","CP::Vec2","classes/CP/Vec2.html#method-i-near-3F","(p1, p2)",""],["new","Binject::DMG","classes/Binject/DMG.html#method-c-new","(p1, p2)",""],["new","Binject::EXE","classes/Binject/EXE.html#method-c-new","(p1)",""],["new","Building","classes/Building.html#method-c-new","(west, east, north, south)",""],["new","CP::BB","classes/CP/BB.html#method-c-new","(p1, p2, p3, p4)",""],["new","CP::Body","classes/CP/Body.html#method-c-new","(p1, p2)",""],["new","CP::Joint::Groove","classes/CP/Joint/Groove.html#method-c-new","(p1, p2, p3, p4, p5)",""],["new","CP::Joint::Pin","classes/CP/Joint/Pin.html#method-c-new","(p1, p2, p3, p4)",""],["new","CP::Joint::Pivot","classes/CP/Joint/Pivot.html#method-c-new","(p1, p2, p3)",""],["new","CP::Joint::Slide","classes/CP/Joint/Slide.html#method-c-new","(p1, p2, p3, p4, p5, p6)",""],["new","CP::Shape::Circle","classes/CP/Shape/Circle.html#method-c-new","(p1, p2, p3)",""],["new","CP::Shape::Poly","classes/CP/Shape/Poly.html#method-c-new","(p1, p2, p3)",""],["new","CP::Shape::Segment","classes/CP/Shape/Segment.html#method-c-new","(p1, p2, p3, p4)",""],["new","CP::Space","classes/CP/Space.html#method-c-new","()",""],["new","CP::Vec2","classes/CP/Vec2.html#method-c-new","(p1, p2)",""],["new","Calc","classes/Calc.html#method-c-new","()",""],["new","Comic","classes/Comic.html#method-c-new","(body)",""],["new","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-c-new","(options = {})",""],["new","FTSearch::DocumentMapWriter","classes/FTSearch/DocumentMapWriter.html#method-c-new","(options = {})",""],["new","FTSearch::FieldInfos","classes/FTSearch/FieldInfos.html#method-c-new","(options = {})",""],["new","FTSearch::FragmentWriter","classes/FTSearch/FragmentWriter.html#method-c-new","(options = {})",""],["new","FTSearch::FulltextReader","classes/FTSearch/FulltextReader.html#method-c-new","(options = {})",""],["new","FTSearch::FulltextWriter","classes/FTSearch/FulltextWriter.html#method-c-new","(options = {})",""],["new","FTSearch::SuffixArrayReader","classes/FTSearch/SuffixArrayReader.html#method-c-new","(fulltext_reader, doc_map, options = {})",""],["new","FTSearch::SuffixArrayWriter","classes/FTSearch/SuffixArrayWriter.html#method-c-new","(options = {})",""],["new","Field","classes/Field.html#method-c-new","(app, level = :beginner)",""],["new","Field::Bomb","classes/Field/Bomb.html#method-c-new","(exploded = false)",""],["new","Field::Cell","classes/Field/Cell.html#method-c-new","(aflag = false)",""],["new","Field::OpenCell","classes/Field/OpenCell.html#method-c-new","(bombs_around = 0)",""],["new","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-c-new","(app)",""],["new","Gem::ShoesFace::ProgressReporter","classes/Gem/ShoesFace/ProgressReporter.html#method-c-new","(prog, status, size, initial_message, terminal_message = \"complete\")",""],["new","Gem::ShoesFace::SilentDownloadReporter","classes/Gem/ShoesFace/SilentDownloadReporter.html#method-c-new","(out_stream, *args)",""],["new","Homebrew","classes/Homebrew.html#method-c-new","()",""],["new","Hpricot::CssProxy","classes/Hpricot/CssProxy.html#method-c-new","(builder, sym)","<p>Creates a CssProxy object.\n"],["new","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-c-new","(p1 = v1)","<p>Instantiates a new State object, configured by <em>opts</em>.\n<p><em>opts</em> can have the following keys:\n<p><strong>indent</strong>: a string …\n"],["new","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-c-new","(p1, p2 = v2)","<p>Creates a new JSON::Ext::Parser instance for the string <em>source</em>.\n<p>Creates a new JSON::Ext::Parser instance …\n"],["new","MenuPanel","classes/MenuPanel.html#method-c-new","(color, args)",""],["new","MimickIRB","classes/MimickIRB.html#method-c-new","()",""],["new","Othello::Game","classes/Othello/Game.html#method-c-new","()",""],["new","Othello::Game::Player","classes/Othello/Game/Player.html#method-c-new","(color=:black,pieces=0)",""],["new","Redcarpet::Markdown","classes/Redcarpet/Markdown.html#method-c-new","(p1, p2 = v2)",""],["new","Redcarpet::Render::Base","classes/Redcarpet/Render/Base.html#method-c-new","()",""],["new","Redcarpet::Render::HTML","classes/Redcarpet/Render/HTML.html#method-c-new","(p1 = v1)",""],["new","Redcarpet::Render::HTML_TOC","classes/Redcarpet/Render/HTML_TOC.html#method-c-new","()",""],["new","Redcarpet::Render::XHTML","classes/Redcarpet/Render/XHTML.html#method-c-new","(extensions={})",""],["new","SQLite3::Database","classes/SQLite3/Database.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new Database object that opens the given file. If utf16 is\n<code>true</code>, the filename is interpreted …\n"],["new","SQLite3::Database","classes/SQLite3/Database.html#method-c-new","(handler)",""],["new","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#method-c-new","()","<p>Create a new FunctionProxy that encapsulates the given <code>func</code>\nobject. If context is non-nil, the functions …\n"],["new","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-c-new","(db, stmt)","<p>Create a new ResultSet attached to the given database, using the given sql\ntext.\n"],["new","SQLite3::Statement","classes/SQLite3/Statement.html#method-c-new","(p1, p2)","<p>Create a new statement attached to the given Database instance, and which\nencapsulates the given SQL …\n"],["new","SQLite3::Translator","classes/SQLite3/Translator.html#method-c-new","()","<p>Create a new Translator instance. It will be preinitialized with default\ntranslators for most SQL data …\n"],["new","SQLite3::Value","classes/SQLite3/Value.html#method-c-new","( db, handle )",""],["new","Shell","classes/Shell.html#method-c-new","(x, y, angle)",""],["new","ShellCommandRunner","classes/ShellCommandRunner.html#method-c-new","()",""],["new","Shoes::Search","classes/Shoes/Search.html#method-c-new","(fields = [:uri, :body])",""],["new","Shoes::Setup","classes/Shoes/Setup.html#method-c-new","(script, &blk)",""],["new","Tank","classes/Tank.html#method-c-new","()",""],["new_board","Othello::Game","classes/Othello/Game.html#method-i-new_board","()","<p>Build the array for the board, with zero-based arrays.\n"],["new_game","Object","classes/Object.html#method-i-new_game","(level)",""],["new_game","Opp","classes/Opp.html#method-c-new_game","()",""],["new_position","Object","classes/Object.html#method-i-new_position","(frame_max, object_size, starting_point)",""],["next","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-next","()","<p>Returns the node neighboring this node to the south: just below it. This\nmethod includes text nodes and …\n"],["next","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-i-next","()","<p>Obtain the next row from the cursor. If there are no more rows to be had,\nthis will return <code>nil</code>. If type …\n"],["next_in_direction","Othello::Game","classes/Othello/Game.html#method-i-next_in_direction","(c, dir)","<p>Perform the operations to get the next spot in the appropriate direction\n"],["next_node","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-next_node","()",""],["next_player","Othello::Game","classes/Othello/Game.html#method-i-next_player","()",""],["next_sibling","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-next_sibling","()","<p>Returns the container node neighboring this node to the south: just below\nit. By “container” …\n"],["next_turn","Othello::Game","classes/Othello/Game.html#method-i-next_turn","(check_available_moves=true)",""],["no_steps?","Shoes::Setup","classes/Shoes/Setup.html#method-i-no_steps-3F","()",""],["node_position","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-node_position","()",""],["nodes_at","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-nodes_at","(*pos)","<p>Puts together an array of neighboring nodes based on their proximity to\nthis node.  So, for example, …\n"],["normal_text","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-normal_text","(text)",""],["normalize","CP::Vec2","classes/CP/Vec2.html#method-i-normalize","()",""],["normalize!","CP::Vec2","classes/CP/Vec2.html#method-i-normalize-21","()",""],["north","Tank","classes/Tank.html#method-i-north","()",""],["not","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-not","(expr)",""],["notify_cache_of","DATABASE","classes/DATABASE.html#method-c-notify_cache_of","(url, etag, hash)",""],["null?","SQLite3::Value","classes/SQLite3/Value.html#method-i-null-3F","()",""],["num_documents","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-num_documents","()",""],["object_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-object_nl","()","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["object_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-object_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["offsets_to_field_infos","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-offsets_to_field_infos","(offsets)",""],["open","SQLite3::Database","classes/SQLite3/Database.html#method-c-open","(p1, p2 = v2, p3 = v3)",""],["open_link","Shoes::Manual","classes/Shoes/Manual.html#method-i-open_link","(head)",""],["open_methods","Shoes::Manual","classes/Shoes/Manual.html#method-i-open_methods","(meth_s, terms = nil, meth_a = nil)",""],["open_page","Accordion","classes/Accordion.html#method-i-open_page","(stack)",""],["open_section","Shoes::Manual","classes/Shoes/Manual.html#method-i-open_section","(sect_s, terms = nil)",""],["opp_piece","Othello::Game::Player","classes/Othello/Game/Player.html#method-i-opp_piece","()",""],["p","Shoes::Manual","classes/Shoes/Manual.html#method-c-p","(str, path)",""],["p=","CP::Body","classes/CP/Body.html#method-i-p-3D","(p1)",""],["page","Accordion","classes/Accordion.html#method-i-page","(title, text)",""],["paint","Field","classes/Field.html#method-i-paint","()",""],["paragraph","Redcarpet::Render::ManPage","classes/Redcarpet/Render/ManPage.html#method-i-paragraph","(text)",""],["parse","Hpricot","classes/Hpricot.html#method-c-parse","(input = nil, opts = {}, &blk)","<p>Hpricot.parse parses <em>input</em> and return a document tree. represented\nby Hpricot::Doc.\n"],["parse","JSON","classes/JSON.html#method-i-parse","(source, opts = {})","<p>Parse the JSON string <em>source</em> into a Ruby data structure and return\nit.\n<p><em>opts</em> can have the following keys: …\n"],["parse","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-i-parse","()","<p>Parses the current JSON text <em>source</em> and returns the complete data\nstructure as a result.\n"],["parse!","JSON","classes/JSON.html#method-i-parse-21","(source, opts = {})","<p>Parse the JSON string <em>source</em> into a Ruby data structure and return\nit. The bang version of the parse …\n"],["parser_trace","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-parser_trace","()",""],["parser_trace=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-parser_trace-3D","( mode )",""],["path","Shoes::Manual","classes/Shoes/Manual.html#method-c-path","()",""],["perp","CP::Vec2","classes/CP/Vec2.html#method-i-perp","()",""],["piece","Othello::Game::Player","classes/Othello/Game/Player.html#method-i-piece","()",""],["pkg","Shoes::Pack","classes/Shoes/Pack.html#method-c-pkg","(platform, opt)",""],["play","Bloops","classes/Bloops.html#method-i-play","()",""],["position","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-position","()",""],["possible_move?","Othello::Game","classes/Othello/Game.html#method-i-possible_move-3F","(c=[0,0])",""],["postprocess","Redcarpet::Render::SmartyPants","classes/Redcarpet/Render/SmartyPants.html#method-i-postprocess","(p1)",""],["preceding","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-preceding","()","<p>Find all preceding nodes.\n"],["preceding_siblings","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-preceding_siblings","()","<p>Find all preceding sibling elements.   Like the other “sibling” methods,\nthis weeds out text …\n"],["prepare","SQLite3::Database","classes/SQLite3/Database.html#method-i-prepare","(sql)","<p>Returns a Statement object representing the given SQL. This does not\nexecute the statement; it merely …\n"],["prepend","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-prepend","(str = nil, &blk)","<p>Add to the start of the contents inside each element in this list. Pass in\nan HTML <code>str</code>, which is turned …\n"],["press_clear","Calc","classes/Calc.html#method-i-press_clear","()",""],["press_equals","Calc","classes/Calc.html#method-i-press_equals","()",""],["pretty_generate","JSON","classes/JSON.html#method-i-pretty_generate","(obj, opts = nil)","<p>Unparse the Ruby data structure <em>obj</em> into a JSON string and return\nit. The returned string is a prettier …\n"],["previous","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-previous","()","<p>Returns to node neighboring this node to the north: just above it. This\nmethod includes text nodes and …\n"],["previous_node","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-previous_node","()",""],["previous_sibling","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-previous_sibling","()","<p>Returns the container node neighboring this node to the north: just above\nit. By “container” …\n"],["procins?","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-procins-3F","()","<p>Is this object an XML processing instruction?\n"],["progress","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-progress","(count, total)",""],["progress","Shy","classes/Shy.html#method-c-progress","(total, &blk)",""],["progress_reporter","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-progress_reporter","(*args)",""],["project","CP::Vec2","classes/CP/Vec2.html#method-i-project","(p1)",""],["project","Opp","classes/Opp.html#method-c-project","(left, right, top, bottom, depth)",""],["query","SQLite3::Database","classes/SQLite3/Database.html#method-i-query","( sql, bind_vars = [], *args )","<p>This is a convenience method for creating a statement, binding paramters to\nit, and calling execute: …\n"],["quote","SQLite3::Database","classes/SQLite3/Database.html#method-c-quote","( string )","<p>Quotes the given string, making it safe to use in an SQL statement. It\nreplaces all instances of the …\n"],["r","CP::BB","classes/CP/BB.html#method-i-r","()",""],["r=","CP::BB","classes/CP/BB.html#method-i-r-3D","(p1)",""],["rand","Range","classes/Range.html#method-i-rand","()",""],["random_amount","Object","classes/Object.html#method-i-random_amount","()",""],["random_direction","Object","classes/Object.html#method-i-random_direction","()",""],["random_position","Object","classes/Object.html#method-i-random_position","(starting_point)",""],["rank_offsets","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-rank_offsets","(offsets, weights)",""],["rank_offsets_probabilistic","FTSearch::DocumentMapReader","classes/FTSearch/DocumentMapReader.html#method-i-rank_offsets_probabilistic","(offsets, weights, iterations)",""],["read_input","Opp","classes/Opp.html#method-c-read_input","()",""],["recurse_proc","JSON","classes/JSON.html#method-c-recurse_proc","(result, &proc)",""],["refresh","Object","classes/Object.html#method-i-refresh","()",""],["refresh_todo","Object","classes/Object.html#method-i-refresh_todo","()",""],["rehash_static","CP::Space","classes/CP/Space.html#method-i-rehash_static","()",""],["remember","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-remember","(p1)","<p>Remember <em>object</em>, to find out if it was already encountered (if a\ncyclic data structure is rendered). …\n"],["remove","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-remove","()","<p>Remove all elements in this list from the document which contains them.\n\n<pre>doc = Hpricot(&quot;&lt;html&gt;Remove this: ...</pre>\n"],["remove_attr","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-remove_attr","(name)","<p>Remove an attribute from each of the matched elements.\n\n<pre>(doc/&quot;input&quot;).remove_attr(&quot;disabled&quot;)</pre>\n"],["remove_attribute","Hpricot::Elem::Trav","classes/Hpricot/Elem/Trav.html#method-i-remove_attribute","(name)",""],["remove_body","CP::Space","classes/CP/Space.html#method-i-remove_body","(p1)",""],["remove_class","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-remove_class","(name = nil)","<p>Removes a class from all matched elements.\n\n<pre>(doc/&quot;span&quot;).remove_class(&quot;lightgrey&quot;)</pre>\n<p>Or, to remove all classes: …\n"],["remove_collision_func","CP::Space","classes/CP/Space.html#method-i-remove_collision_func","(p1, p2)",""],["remove_custom_formulas","Homebrew","classes/Homebrew.html#method-i-remove_custom_formulas","()",""],["remove_custom_remote","Homebrew","classes/Homebrew.html#method-i-remove_custom_remote","()",""],["remove_joint","CP::Space","classes/CP/Space.html#method-i-remove_joint","(p1)",""],["remove_shape","CP::Space","classes/CP/Space.html#method-i-remove_shape","(p1)",""],["remove_static_shape","CP::Space","classes/CP/Space.html#method-i-remove_static_shape","(p1)",""],["render","Redcarpet::Markdown","classes/Redcarpet/Markdown.html#method-i-render","(p1)",""],["render","Redcarpet::Render::SmartyPants","classes/Redcarpet/Render/SmartyPants.html#method-c-render","(text)",""],["render_bomb","Field","classes/Field.html#method-i-render_bomb","(x, y)",""],["render_cell","Field","classes/Field.html#method-i-render_cell","(x, y, color = \"#AAA\", stroke = true)",""],["render_field","Object","classes/Object.html#method-i-render_field","()",""],["render_flag","Field","classes/Field.html#method-i-render_flag","(x, y)",""],["render_number","Field","classes/Field.html#method-i-render_number","(x, y)",""],["render_with","HTMLRenderTest","classes/HTMLRenderTest.html#method-i-render_with","(rndr, text)",""],["render_with","MarkdownTest","classes/MarkdownTest.html#method-i-render_with","(flags, text)",""],["replace_child","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-replace_child","(old, new)","<p>Replace <code>old</code>, a child of the current node, with\n<code>new</code> node.\n"],["reset","Bloops::Sound","classes/Bloops/Sound.html#method-i-reset","()",""],["reset","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-i-reset","( *bind_params )","<p>Reset the cursor, so that a result set which has reached end-of-file can be\nrewound and reiterated.\n"],["reset!","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-reset-21","()","<p>Resets the statement. This is typically done internally, though it might\noccassionally be necessary to …\n"],["reset_forces","CP::Body","classes/CP/Body.html#method-i-reset_forces","()",""],["reset_id_counter","CP::Shape","classes/CP/Shape.html#method-c-reset_id_counter","()",""],["resize_active_hash","CP::Space","classes/CP/Space.html#method-i-resize_active_hash","(p1, p2)",""],["resize_static_hash","CP::Space","classes/CP/Space.html#method-i-resize_static_hash","(p1, p2)",""],["restore","JSON","classes/JSON.html#method-c-restore","(source, proc = nil)",""],["reveal!","Field","classes/Field.html#method-i-reveal-21","(x, y)",""],["rewrite","Make","classes/Make.html#method-i-rewrite","(before, after, reg = /\\#\\{(\\w+)\\}/, reg2 = '\\1')","<p>Subs in special variables\n"],["rewrite","Shoes::Pack","classes/Shoes/Pack.html#method-c-rewrite","(a, before, hsh)",""],["right_bottom_corner_of_piece","Othello","classes/Othello.html#method-i-right_bottom_corner_of_piece","(a,b)",""],["rollback","SQLite3::Database","classes/SQLite3/Database.html#method-i-rollback","()","<p>Rolls the current transaction back. If there is no current transaction,\nthis will cause an error to be …\n"],["root","Hpricot::Doc::Trav","classes/Hpricot/Doc/Trav.html#method-i-root","()",""],["rot","CP::Body","classes/CP/Body.html#method-i-rot","()",""],["rotate","CP::Vec2","classes/CP/Vec2.html#method-i-rotate","(p1)",""],["run","MimickIRB","classes/MimickIRB.html#method-i-run","(str)",""],["run","ShellCommandRunner","classes/ShellCommandRunner.html#method-i-run","(command)",""],["run_code","Shoes::Manual","classes/Shoes/Manual.html#method-i-run_code","(str)",""],["sample_page","Shoes::Manual","classes/Shoes/Manual.html#method-i-sample_page","()",""],["save","Binject::DMG","classes/Binject/DMG.html#method-i-save","(p1)",""],["save","Binject::EXE","classes/Binject/EXE.html#method-i-save","(p1)",""],["save","Object","classes/Object.html#method-i-save","()",""],["say","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-say","(msg)",""],["scan","Hpricot","classes/Hpricot.html#method-c-scan","(p1, p2 = v2)",""],["schema_cookie","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-schema_cookie","()",""],["schema_cookie=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-schema_cookie-3D","( cookie )",""],["search","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-search","(*expr,&blk)","<p>Searches this list for any elements (or children of these elements)\nmatching the CSS or XPath expression …\n"],["search","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-search","(expr, &blk)","<p>Searches this node for all elements matching the CSS or XPath\n<code>expr</code>.  Returns an Elements array containing …\n"],["seen?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-seen-3F","(p1)","<p>Returns <em>true</em>, if <em>object</em> was already seen during this\ngenerating run.\n"],["set","Hpricot::Builder","classes/Hpricot/Builder.html#method-c-set","(option, value)",""],["set","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-set","(key, value = nil, &blk)",""],["set_attribute","Hpricot::Elem::Trav","classes/Hpricot/Elem/Trav.html#method-i-set_attribute","(name, val)",""],["set_default_collision_func","CP::Space","classes/CP/Space.html#method-i-set_default_collision_func","(&block)",""],["set_destination","Tank","classes/Tank.html#method-i-set_destination","()",""],["set_error","SQLite3::Database::FunctionProxy","classes/SQLite3/Database/FunctionProxy.html#method-i-set_error","( error )","<p>Set the result of the function to the given error message. The function\nwill then return that error. …\n"],["setup","DATABASE","classes/DATABASE.html#method-c-setup","()",""],["setup","HTMLRenderTest","classes/HTMLRenderTest.html#method-i-setup","()",""],["setup","MarkdownTest","classes/MarkdownTest.html#method-i-setup","()",""],["setup","PathologicalInputsTest","classes/PathologicalInputsTest.html#method-i-setup","()",""],["setup","Shoes::LogWindow","classes/Shoes/LogWindow.html#method-i-setup","()",""],["setup","SmartyPantsTest","classes/SmartyPantsTest.html#method-i-setup","()",""],["setup_app","Shoes::Setup","classes/Shoes/Setup.html#method-c-setup_app","(setup)",""],["setup_system_resources","MakeDarwin","classes/MakeDarwin.html#method-c-setup_system_resources","()",""],["setup_system_resources","MakeLinux","classes/MakeLinux.html#method-c-setup_system_resources","()",""],["setup_system_resources","MakeMinGW","classes/MakeMinGW.html#method-c-setup_system_resources","()",""],["sh","Homebrew","classes/Homebrew.html#method-i-sh","(command)",""],["sh","MakeMinGW","classes/MakeMinGW.html#method-c-sh","(*args)","<p>Execute shell calls through bash if we are compiling with mingw. This\nbreaks us out of the windows command …\n"],["shape_point_query","CP::Space","classes/CP/Space.html#method-i-shape_point_query","(p1, &block)",""],["show_search","Shoes::Manual","classes/Shoes/Manual.html#method-i-show_search","()",""],["siblings_at","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-siblings_at","(*pos)","<p>Puts together an array of neighboring sibling elements based on their\nproximity to this element.\n<p>This …\n"],["size","FTSearch::SuffixArrayReader::LazyHits","classes/FTSearch/SuffixArrayReader/LazyHits.html#method-i-size","()",""],["skel_replace","Object","classes/Object.html#method-i-skel_replace","(line)",""],["skip_turn?","Othello::Game","classes/Othello/Game.html#method-i-skip_turn-3F","()",""],["slide_anim","Object","classes/Object.html#method-i-slide_anim","(&blk)",""],["slide_in","Object","classes/Object.html#method-i-slide_in","(slot)",""],["slide_out","Object","classes/Object.html#method-i-slide_out","(slot)",""],["sound","Bloops","classes/Bloops.html#method-c-sound","(p1)",""],["sound","Bloops","classes/Bloops.html#method-i-sound","(p1)",""],["source","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-i-source","()","<p>Returns a copy of the current <em>source</em> string, that was used to\nconstruct this Parser.\n"],["source","Shoes::Setup","classes/Shoes/Setup.html#method-i-source","(uri)",""],["south","Tank","classes/Tank.html#method-i-south","()",""],["space","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space","()","<p>This string is used to insert a space between the tokens in a JSON string.\n"],["space=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space-3D","(p1)","<p>This string is used to insert a space between the tokens in a JSON string.\n"],["space_before","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space_before","()","<p>This string is used to insert a space before the ‘:’ in JSON objects.\n"],["space_before=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space_before-3D","(p1)","<p>This string is used to insert a space before the ‘:’ in JSON objects.\n"],["start","Shoes::Setup","classes/Shoes/Setup.html#method-i-start","(app)",""],["static_shape_point_query","CP::Space","classes/CP/Space.html#method-i-static_shape_point_query","(p1, &block)",""],["step","CP::Space","classes/CP/Space.html#method-i-step","(p1)",""],["step","SQLite3::Database","classes/SQLite3/Database.html#method-c-step","( &block )",""],["step","SQLite3::Database","classes/SQLite3/Database.html#method-i-step","( *args )",""],["step","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-step","()",""],["stop_anim","Object","classes/Object.html#method-i-stop_anim","()",""],["stopped?","Bloops","classes/Bloops.html#method-i-stopped-3F","()",""],["suffix_index_to_offset","FTSearch::SuffixArrayReader","classes/FTSearch/SuffixArrayReader.html#method-i-suffix_index_to_offset","(suffix_index)",""],["surface_v","CP::Shape","classes/CP/Shape.html#method-i-surface_v","()",""],["surface_v=","CP::Shape","classes/CP/Shape.html#method-i-surface_v-3D","(p1)",""],["svn","Shoes::Setup","classes/Shoes/Setup.html#method-i-svn","(dir, save_as = nil, &blk)",""],["swap","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-swap","(html = nil, &blk)","<p>Replace this element and its contents with the nodes contained in the\n<code>html</code> string.\n"],["synchronous","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-synchronous","()",""],["synchronous=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-synchronous-3D","( mode )",""],["t","CP::BB","classes/CP/BB.html#method-i-t","()",""],["t=","CP::BB","classes/CP/BB.html#method-i-t-3D","(p1)",""],["t=","CP::Body","classes/CP/Body.html#method-i-t-3D","(p1)",""],["table_info","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-table_info","(table)","<p>Returns information about <code>table</code>.  Yields each row of table\ninformation if a block is provided.\n"],["table_of_contents","Book","classes/Book.html#method-i-table_of_contents","()",""],["tag!","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-tag-21","(tag, *args, &block)","<p>Create a tag named <code>tag</code>. Other than the first argument which is\nthe tag name, the arguments are the same …\n"],["tank","Opp","classes/Opp.html#method-c-tank","()",""],["temp_store","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-temp_store","()",""],["temp_store=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-temp_store-3D","( mode )",""],["tempo","Bloops","classes/Bloops.html#method-i-tempo","()",""],["tempo=","Bloops","classes/Bloops.html#method-i-tempo-3D","(p1)",""],["test","Bloops::Sound","classes/Bloops/Sound.html#method-i-test","()",""],["test_autolinking_with_ent_chars","MarkdownTest","classes/MarkdownTest.html#method-i-test_autolinking_with_ent_chars","()",""],["test_block_quotes_preceded_by_spaces","MarkdownTest","classes/MarkdownTest.html#method-i-test_block_quotes_preceded_by_spaces","()","<p>This isn’t in the spec but is Markdown.pl behavior.\n"],["test_filter_html_doesnt_break_two_space_hard_break","HTMLRenderTest","classes/HTMLRenderTest.html#method-i-test_filter_html_doesnt_break_two_space_hard_break","()",""],["test_headings_with_trailing_space","MarkdownTest","classes/MarkdownTest.html#method-i-test_headings_with_trailing_space","()","<p>github.com/rtomayko/rdiscount/issues/#issue/13\n"],["test_infinite_loop_in_header","MarkdownTest","classes/MarkdownTest.html#method-i-test_infinite_loop_in_header","()",""],["test_link_syntax_is_not_processed_within_code_blocks","MarkdownTest","classes/MarkdownTest.html#method-i-test_link_syntax_is_not_processed_within_code_blocks","()",""],["test_memory_leak_when_parsing_char_links","MarkdownTest","classes/MarkdownTest.html#method-i-test_memory_leak_when_parsing_char_links","()",""],["test_para_before_block_html_should_not_wrap_in_p_tag","MarkdownTest","classes/MarkdownTest.html#method-i-test_para_before_block_html_should_not_wrap_in_p_tag","()",""],["test_pathological_1","PathologicalInputsTest","classes/PathologicalInputsTest.html#method-i-test_pathological_1","()",""],["test_pathological_2","PathologicalInputsTest","classes/PathologicalInputsTest.html#method-i-test_pathological_2","()",""],["test_pathological_3","PathologicalInputsTest","classes/PathologicalInputsTest.html#method-i-test_pathological_3","()",""],["test_pathological_4","PathologicalInputsTest","classes/PathologicalInputsTest.html#method-i-test_pathological_4","()",""],["test_should_return_string_in_same_encoding_as_input","MarkdownTest","classes/MarkdownTest.html#method-i-test_should_return_string_in_same_encoding_as_input","()",""],["test_simple_inline_html","MarkdownTest","classes/MarkdownTest.html#method-i-test_simple_inline_html","()",""],["test_simple_overload","CustomRenderTest","classes/CustomRenderTest.html#method-i-test_simple_overload","()",""],["test_spaced_headers","MarkdownTest","classes/MarkdownTest.html#method-i-test_spaced_headers","()",""],["test_strikethrough_flag_works","MarkdownTest","classes/MarkdownTest.html#method-i-test_strikethrough_flag_works","()",""],["test_that_autolink_flag_works","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_autolink_flag_works","()",""],["test_that_fenced_flag_works","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_fenced_flag_works","()",""],["test_that_filter_html_works","HTMLRenderTest","classes/HTMLRenderTest.html#method-i-test_that_filter_html_works","()",""],["test_that_headers_are_linkable","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_headers_are_linkable","()",""],["test_that_html_blocks_do_not_require_their_own_end_tag_line","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_html_blocks_do_not_require_their_own_end_tag_line","()",""],["test_that_inline_markdown_goes_to_html","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_inline_markdown_goes_to_html","()",""],["test_that_inline_markdown_starts_and_ends_correctly","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_inline_markdown_starts_and_ends_correctly","()",""],["test_that_intra_emphasis_works","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_intra_emphasis_works","()",""],["test_that_no_image_flag_works","HTMLRenderTest","classes/HTMLRenderTest.html#method-i-test_that_no_image_flag_works","()",""],["test_that_no_links_flag_works","HTMLRenderTest","classes/HTMLRenderTest.html#method-i-test_that_no_links_flag_works","()",""],["test_that_safelink_flag_works","HTMLRenderTest","classes/HTMLRenderTest.html#method-i-test_that_safelink_flag_works","()",""],["test_that_simple_one_liner_goes_to_html","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_simple_one_liner_goes_to_html","()",""],["test_that_smart_converts_double_quotes_to_curly_quotes","SmartyPantsTest","classes/SmartyPantsTest.html#method-i-test_that_smart_converts_double_quotes_to_curly_quotes","()",""],["test_that_smart_converts_single_quotes_in_words_that_end_in_ll","SmartyPantsTest","classes/SmartyPantsTest.html#method-i-test_that_smart_converts_single_quotes_in_words_that_end_in_ll","()",""],["test_that_smart_converts_single_quotes_in_words_that_end_in_re","SmartyPantsTest","classes/SmartyPantsTest.html#method-i-test_that_smart_converts_single_quotes_in_words_that_end_in_re","()",""],["test_that_smart_gives_d_suffix_a_rsquo","SmartyPantsTest","classes/SmartyPantsTest.html#method-i-test_that_smart_gives_d_suffix_a_rsquo","()",""],["test_that_smart_gives_m_suffix_a_rsquo","SmartyPantsTest","classes/SmartyPantsTest.html#method-i-test_that_smart_gives_m_suffix_a_rsquo","()",""],["test_that_smart_gives_ve_suffix_a_rsquo","SmartyPantsTest","classes/SmartyPantsTest.html#method-i-test_that_smart_gives_ve_suffix_a_rsquo","()",""],["test_that_tables_flag_works","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_tables_flag_works","()",""],["test_that_tags_can_have_dashes_and_underscores","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_tags_can_have_dashes_and_underscores","()",""],["test_that_urls_are_not_doubly_escaped","MarkdownTest","classes/MarkdownTest.html#method-i-test_that_urls_are_not_doubly_escaped","()",""],["test_unbound_recursion","PathologicalInputsTest","classes/PathologicalInputsTest.html#method-i-test_unbound_recursion","()",""],["test_whitespace_after_urls","MarkdownTest","classes/MarkdownTest.html#method-i-test_whitespace_after_urls","()",""],["text","FTSearch::SuffixArrayReader::Hit","classes/FTSearch/SuffixArrayReader/Hit.html#method-i-text","(size)",""],["text","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-text","(string)","<p>Write a <code>string</code> to the HTML stream without escaping it.\n"],["text","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-text","()",""],["text!","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-text-21","(string)","<p>Write a <code>string</code> to the HTML stream, making sure to escape it.\n"],["text?","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-text-3F","()","<p>Is this object an HTML text node?\n"],["title","Gem::ShoesFace","classes/Gem/ShoesFace.html#method-i-title","(msg)",""],["title","Hpricot::Doc::Trav","classes/Hpricot/Doc/Trav.html#method-i-title","()","<p><code>title</code> searches title and return it as a text. It returns nil\nif not found.\n<p><code>title</code> searchs following information. …\n"],["to_a","CP::Vec2","classes/CP/Vec2.html#method-i-to_a","()",""],["to_angle","CP::Vec2","classes/CP/Vec2.html#method-i-to_angle","()",""],["to_blob","SQLite3::Value","classes/SQLite3/Value.html#method-i-to_blob","()",""],["to_blob","String","classes/String.html#method-i-to_blob","()",""],["to_f","SQLite3::Value","classes/SQLite3/Value.html#method-i-to_f","()",""],["to_h","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-to_h","()","<p>Returns the configuration instance variables as a hash, that can be passed\nto the configure method.\n"],["to_html","Array","classes/Array.html#method-i-to_html","()",""],["to_html","Hash","classes/Hash.html#method-i-to_html","()",""],["to_html","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-to_html","()","<p>Convert this group of elements into a complete HTML fragment, returned as a\nstring.\n"],["to_html","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-to_html","()","<p>Builds an HTML string from this node and its contents. If you need to write\nto a stream, try calling …\n"],["to_i","SQLite3::Value","classes/SQLite3/Value.html#method-i-to_i","()",""],["to_int64","SQLite3::Value","classes/SQLite3/Value.html#method-i-to_int64","()",""],["to_json","Date","classes/Date.html#method-i-to_json","(*args)",""],["to_json","DateTime","classes/DateTime.html#method-i-to_json","(*args)",""],["to_json","Enumerable","classes/Enumerable.html#method-i-to_json","(*a)",""],["to_json","Exception","classes/Exception.html#method-i-to_json","(*args)",""],["to_json","JSON::Ext::Generator::GeneratorMethods::Array","classes/JSON/Ext/Generator/GeneratorMethods/Array.html#method-i-to_json","(p1 = v1, p2 = v2)","<p>Returns a JSON string containing a JSON array, that is unparsed from this\nArray instance. <em>state</em> is a …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::FalseClass","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html#method-i-to_json","(*args)","<p>Returns a JSON string for false: ‘false’.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Float","classes/JSON/Ext/Generator/GeneratorMethods/Float.html#method-i-to_json","(p1 = v1, *args)","<p>Returns a JSON string representation for this Float number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Hash","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html#method-i-to_json","(p1 = v1, p2 = v2)","<p>Returns a JSON string containing a JSON object, that is unparsed from this\nHash instance. <em>state</em> is a …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Integer","classes/JSON/Ext/Generator/GeneratorMethods/Integer.html#method-i-to_json","(*args)","<p>Returns a JSON string representation for this Integer number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::NilClass","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html#method-i-to_json","(*args)",""],["to_json","JSON::Ext::Generator::GeneratorMethods::Object","classes/JSON/Ext/Generator/GeneratorMethods/Object.html#method-i-to_json","(*args)","<p>Converts this object to a string (calling #to_s), converts it to a JSON\nstring, and returns the result. …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json","(*args)","<p>This string should be encoded with UTF-8 A call to this method returns a\nJSON string encoded with UTF16 …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::TrueClass","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html#method-i-to_json","(*args)","<p>Returns a JSON string for true: ‘true’.\n"],["to_json","Object","classes/Object.html#method-i-to_json","(*a)",""],["to_json","Range","classes/Range.html#method-i-to_json","(*args)",""],["to_json","Regexp","classes/Regexp.html#method-i-to_json","(*)",""],["to_json","Struct","classes/Struct.html#method-i-to_json","(*args)",""],["to_json","Symbol","classes/Symbol.html#method-i-to_json","(*a)",""],["to_json","Time","classes/Time.html#method-i-to_json","(*args)",""],["to_json_raw","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json_raw","(*args)","<p>This method creates a JSON text from the result of a call to\nto_json_raw_object of this String.\n"],["to_json_raw_object","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json_raw_object","()","<p>This method creates a raw object hash, that can be nested into other data\nstructures and will be unparsed …\n"],["to_original_html","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-to_original_html","()","<p>Attempts to preserve the original HTML of the document, only outputing new\ntags for elements which have …\n"],["to_plain_text","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-to_plain_text","()","<p>Builds a string from the text contained in this node.  All HTML elements\nare removed.\n"],["to_s","Bloops::Track","classes/Bloops/Track.html#method-i-to_s","()",""],["to_s","CP::BB","classes/CP/BB.html#method-i-to_s","()",""],["to_s","CP::Vec2","classes/CP/Vec2.html#method-i-to_s","()",""],["to_s","Calc","classes/Calc.html#method-i-to_s","()",""],["to_s","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-to_s","()",""],["to_s","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-to_s","()",""],["to_s","Kernel","classes/Kernel.html#method-i-to_s","()","<p>def to_html\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">obj</span> = <span class=\"ruby-keyword\">self</span>\n <span class=\"ruby-constant\">Web</span>.<span class=\"ruby-constant\">Bit</span> {\n   <span class=\"ruby-identifier\">h1</span> <span class=\"ruby-node\">&quot;A #{obj.class}&quot;</span>\n }\n</pre>\n<p>end\n"],["to_s","SQLite3::Value","classes/SQLite3/Value.html#method-i-to_s","( utf16=false )",""],["today","Time","classes/Time.html#method-c-today","()",""],["total_changes","SQLite3::Database","classes/SQLite3/Database.html#method-i-total_changes","()","<p>Returns the total number of changes made to this database instance since it\nwas opened.\n"],["total_time","Field","classes/Field.html#method-i-total_time","()",""],["trace","SQLite3::Database","classes/SQLite3/Database.html#method-i-trace","(p1 = v1)","<p>Installs (or removes) a block that will be invoked for every SQL statement\nexecuted. The block receives …\n"],["transaction","SQLite3::Database","classes/SQLite3/Database.html#method-i-transaction","( mode = :deferred )","<p>Begins a new transaction. Note that nested transactions are not allowed by\nSQLite, so attempting to nest …\n"],["transaction_active?","SQLite3::Database","classes/SQLite3/Database.html#method-i-transaction_active-3F","()","<p>Returns <code>true</code> if there is a transaction active, and\n<code>false</code> otherwise.\n"],["translate","SQLite3::Translator","classes/SQLite3/Translator.html#method-i-translate","( type, value )","<p>Translate the given string value to a value of the given type. In the\nabsense of an installed translator …\n"],["translator","SQLite3::Database","classes/SQLite3/Database.html#method-i-translator","()","<p>Return the type translator employed by this database instance. Each\ndatabase instance has its own type …\n"],["traverse_all_element","Hpricot::Doc::Trav","classes/Hpricot/Doc/Trav.html#method-i-traverse_all_element","(&block)",""],["traverse_all_element","Hpricot::Elem::Trav","classes/Hpricot/Elem/Trav.html#method-i-traverse_all_element","(&block)",""],["traverse_all_element","Hpricot::Leaf::Trav","classes/Hpricot/Leaf/Trav.html#method-i-traverse_all_element","()",""],["traverse_element","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-traverse_element","(*names)","<p><code>traverse_element</code> traverses elements in the tree. It yields\nelements in depth first order.\n<p>If <em>names</em> are …\n"],["traverse_some_element","Hpricot::Doc::Trav","classes/Hpricot/Doc/Trav.html#method-i-traverse_some_element","(name_set, &block)",""],["traverse_some_element","Hpricot::Elem::Trav","classes/Hpricot/Elem/Trav.html#method-i-traverse_some_element","(name_set, &block)",""],["traverse_some_element","Hpricot::Leaf::Trav","classes/Hpricot/Leaf/Trav.html#method-i-traverse_some_element","(name_set)",""],["traverse_text","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-traverse_text","()","<p><code>traverse_text</code> traverses texts in the tree\n"],["traverse_text_internal","Hpricot::Container::Trav","classes/Hpricot/Container/Trav.html#method-i-traverse_text_internal","(&block)",""],["traverse_text_internal","Hpricot::Leaf::Trav","classes/Hpricot/Leaf/Trav.html#method-i-traverse_text_internal","()",""],["traverse_text_internal","Hpricot::Text::Trav","classes/Hpricot/Text/Trav.html#method-i-traverse_text_internal","()",""],["tune","Bloops","classes/Bloops.html#method-i-tune","(p1, p2)",""],["turn","Tank","classes/Tank.html#method-i-turn","(direction)",""],["tween","Shoes::Basic","classes/Shoes/Basic.html#method-i-tween","(opts, &blk)",""],["type","Bloops::Sound","classes/Bloops/Sound.html#method-i-type","()",""],["type","SQLite3::Value","classes/SQLite3/Value.html#method-i-type","()",""],["type=","Bloops::Sound","classes/Bloops/Sound.html#method-i-type-3D","(p1)",""],["types","SQLite3::ResultSet","classes/SQLite3/ResultSet.html#method-i-types","()","<p>Returns the types of the columns returned by this result set.\n"],["types","SQLite3::Statement","classes/SQLite3/Statement.html#method-i-types","()","<p>Return an array of the data types for each column in this statement. Note\nthat this may execute the statement …\n"],["u","CP::Shape","classes/CP/Shape.html#method-i-u","()",""],["u=","CP::Shape","classes/CP/Shape.html#method-i-u-3D","(p1)",""],["undo!","Othello::Game","classes/Othello/Game.html#method-i-undo-21","()",""],["undo_todo","Object","classes/Object.html#method-i-undo_todo","(day, item)",""],["universal","Homebrew","classes/Homebrew.html#method-i-universal","()",""],["universal?","Homebrew","classes/Homebrew.html#method-i-universal-3F","()",""],["unrotate","CP::Vec2","classes/CP/Vec2.html#method-i-unrotate","(p1)",""],["update","Gem::ShoesFace::SilentDownloadReporter","classes/Gem/ShoesFace/SilentDownloadReporter.html#method-i-update","(current)",""],["update","Shell","classes/Shell.html#method-i-update","()",""],["update","Shoes::LogWindow","classes/Shoes/LogWindow.html#method-i-update","()",""],["update","Tank","classes/Tank.html#method-i-update","(button, mouse_x, mouse_y)",""],["update_position","CP::Body","classes/CP/Body.html#method-i-update_position","(p1)",""],["update_scene","Opp","classes/Opp.html#method-c-update_scene","()",""],["update_velocity","CP::Body","classes/CP/Body.html#method-i-update_velocity","(p1, p2, p3)",""],["updated","Gem::ShoesFace::ProgressReporter","classes/Gem/ShoesFace/ProgressReporter.html#method-i-updated","(message)",""],["user_cookie","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-user_cookie","()",""],["user_cookie=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-user_cookie-3D","( cookie )",""],["uxs","Hpricot","classes/Hpricot.html#method-c-uxs","(str)","<p>XML unescape\n"],["v=","CP::Body","classes/CP/Body.html#method-i-v-3D","(p1)",""],["valid_location?","Othello::Game","classes/Othello/Game.html#method-i-valid_location-3F","(c=[1,1])","<p>Is this a valid location on board?\n"],["vdbe_trace","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-vdbe_trace","()",""],["vdbe_trace=","SQLite3::Pragmas","classes/SQLite3/Pragmas.html#method-i-vdbe_trace-3D","( mode )",""],["vec2","Kernel","classes/Kernel.html#method-i-vec2","(p1, p2)",""],["w=","CP::Body","classes/CP/Body.html#method-i-w-3D","(p1)",""],["west","Tank","classes/Tank.html#method-i-west","()",""],["wiki_tokens","Shoes::Manual","classes/Shoes/Manual.html#method-i-wiki_tokens","(str, intro = false)",""],["window","Object","classes/Object.html#method-i-window","(*a, &b)",""],["world2local","CP::Body","classes/CP/Body.html#method-i-world2local","(p1)",""],["wrap","Hpricot::Elements","classes/Hpricot/Elements.html#method-i-wrap","(str = nil, &blk)","<p>Wraps each element in the list inside the element created by HTML\n<code>str</code>.  If more than one element is found …\n"],["wrap_vect","CP::BB","classes/CP/BB.html#method-i-wrap_vect","(p1)",""],["x","CP::Vec2","classes/CP/Vec2.html#method-i-x","()",""],["x","Shy","classes/Shy.html#method-c-x","(path, d = \".\")",""],["x=","CP::Vec2","classes/CP/Vec2.html#method-i-x-3D","(p1)",""],["xchr","Hpricot","classes/Hpricot.html#method-c-xchr","(str)","<p>XML escaped version of chr\n"],["xhtml_strict","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-xhtml_strict","(attrs = {}, &block)","<p>Builds an html tag with XHTML 1.0 Strict doctype instead.\n"],["xhtml_transitional","Hpricot::Builder","classes/Hpricot/Builder.html#method-i-xhtml_transitional","(attrs = {}, &block)","<p>Builds an html tag.  An XML 1.0 instruction and an XHTML 1.0 Transitional\ndoctype are prepended.  Also …\n"],["xmldecl?","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-xmldecl-3F","()","<p>Is this object an XML declaration?\n"],["xpath","Hpricot::Doc::Trav","classes/Hpricot/Doc/Trav.html#method-i-xpath","()",""],["xpath","Hpricot::Traverse","classes/Hpricot/Traverse.html#method-i-xpath","()","<p>Builds a unique XPath string for this node, from the root of the document\ncontaining it.\n"],["xs","Hpricot","classes/Hpricot.html#method-c-xs","(str)","<p>XML escaped version of to_s\n"],["xzf","Shy","classes/Shy.html#method-c-xzf","(f, d, &blk)",""],["y","CP::Vec2","classes/CP/Vec2.html#method-i-y","()",""],["y=","CP::Vec2","classes/CP/Vec2.html#method-i-y-3D","(p1)",""],["CHANGELOG","","files/CHANGELOG.html","","<p>Policeman\n<p>17th August, 2010\n<p>Move to Ruby 1.9.1\n"],["COPYING","","files/COPYING.html","","<p>Copyright © 2008 why the lucky stiff Except:\n\n<pre>fonts/Coolvetica.ttf (c) 1999 Ray Larabie\nfonts/Lacuna.ttf ...</pre>\n"],["Gemfile","","files/Gemfile.html","","<p>source “rubygems.org”\n<p>gem “mechanize” gem “gherkin” gem “cucumber” …\n"],["Rakefile","","files/Rakefile.html","","<p>$:.unshift ‘.’\n<p>require ‘rubygems’ require ‘rake’ require ‘rake/clean’ if RUBY_VERSION !=\n‘1.8.7’ require_relative …\n"],["Rakefile_for_windows","","files/Rakefile_for_windows.html","","<p>$:.unshift ‘.’\n<p>require ‘rubygems’ require ‘rake’ require ‘rake/clean’ if RUBY_VERSION !=\n‘1.8.7’ require_relative …\n"],["shoes","","files/bin/shoes.html","","<p>ARGV.delete_if { |x| x =~ /-psn_/ }\n<p>$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), ‘..’, ‘lib’)) …\n"],["Makefile","","files/ext/shoes/Makefile.html","","<p>SHELL = /bin/sh\n<p># V=0 quiet, V=1 verbose.  other values don’t work. V = 0 Q1 = $(V:1=) Q =\n$(Q1:0=@) n=$( …\n"],["dlls","","files/make/mingw/dlls.html","","<p>libungif4 libjpeg-8 libcairo-2 libglib-2.0-0 libgobject-2.0-0\nlibpango-1.0-0 libpangoft2-1.0-0 libgio-2.0-0 …\n"],["pangorc","","files/platform/mac/pangorc.html","","<p>Pango &mdash; ModuleFiles=/Volumes/#{APPNAME}/#{APPNAME}.app/Contents/MacOS/pango.modules\nModulesPath=/Volumes/#{APPNAME}/#{APPNAME}. …\n\n"],["pkg-dmg","","files/platform/mac/pkg-dmg.html","","<p>#!/usr/bin/perl # ***** BEGIN LICENSE BLOCK ***** # Version: MPL 1.1/GPL\n2.0/LGPL 2.1 # # The contents …\n"],["shoes","","files/platform/mac/shoes.html","","<p>#!/bin/sh APPPATH=“${0%/*}” APPFULLPATH=“`cd ”$APPPATH“ 2&gt;/dev/null\n&amp;&amp; pwd`” …\n"],["shoes-launch","","files/platform/mac/shoes-launch.html","","<p>#!/bin/bash APPPATH=“${0%/*}” unset DYLD_LIBRARY_PATH cd “$APPPATH” echo\n“[Pango]” …\n"],["INSTALL","","files/platform/nix/INSTALL.html","","\n<pre>READYING ONE'S SELF TO BUILD SHOES\n\nBefore building, be sure you have all the right libraries installed. ...</pre>\n"],["Makefile","","files/platform/nix/Makefile.html","","<p># shoes - abstract windowing for gtk, osx, and win32 # by why the lucky\nstiff, released to you under …\n"],["LICENSE","","files/req/binject/ext/binject_c/LICENSE.html","","\n<pre>                   GNU GENERAL PUBLIC LICENSE\n                      Version 3, 29 June 2007\n\nCopyright ...</pre>\n"],["README","","files/req/binject/ext/binject_c/README.html","","<p>This library is a Ruby binding for injecting into a raw HFS+ file and\nconverting it to DMG.  Also, this …\n"],["mkhfz","","files/req/binject/ext/binject_c/mkhfz.html","","<p>dd if=/dev/zero of=blank.hfs bs=512K count=1 mkfs.hfsplus -v Shoes\nblank.hfs gzip blank.hfs mv blank.hfs.gz …\n"],["COPYING","","files/req/bloopsaphone/COPYING.html","","<p>:$: BLOOPSAPHONE :$: Copyright © 2009 why the lucky stiff Based on sfxr ©\n2007 Tomas Pettersson\n\n<pre>(Also ...</pre>\n"],["README","","files/req/bloopsaphone/README.html","","\n<pre> |~~              |~~\n |                |\n:$: bloopsaphone :$:\n `''''''''''''''''`</pre>\n<p>for writing chiptune-style …\n"],["LICENSE","","files/req/chipmunk/LICENSE.html","","<p>Copyright © 2007 Scott Lembcke\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","files/req/chipmunk/README.html","","<p>CHIPMUNK VERSION 4.1.0 (C) Scott Lembcke\n<p>IMPORTANT NOTICE:\n<p>(1) 1/10/09 Cross-Platform Gem built by John …\n"],["README_for_Shoes","","files/req/chipmunk/README_for_Shoes_txt.html","","<p>Shoes includes chipmunk\n<p>download chipmunk v4.1.0 *<strong>beoran-chipmunk-7c31926.zip</strong>*\nfrom github.com/beoran/chipmunk/tree/4.1.0 …\n"],["README","","files/req/ftsearch/README.html","","<p>This is far from finished, but there’s enough done to compare the\nperformance for some basic searches …\n"],["LICENSE","","files/req/hpricot/LICENSE.html","","<p>Copyright © 2006 why the lucky stiff\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["gemspec","","files/req/hpricot/gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name = %q{hpricot}\ns.version = &quot;0.8.1&quot;\n\ns.required_rubygems_version = ...</pre>\n"],["GPL","","files/req/json/GPL.html","","\n<pre>                   GNU GENERAL PUBLIC LICENSE\n                      Version 2, June 1991\n\nCopyright (C) ...</pre>\n"],["README","","files/req/json/README.html","","<p>Dependencies for Building\n<p>\n<p>You need rake to build the extensions and install them.\n"],["RUBY","","files/req/json/RUBY.html","","<p>Ruby is copyrighted free software by Yukihiro Matsumoto\n&lt;matz@netlab.co.jp&gt;. You can redistribute …\n"],["gemspec","","files/req/json/gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name = %q{json-shoes}\ns.version = &quot;1.1.3&quot;\n\ns.required_rubygems_version ...</pre>\n"],["COPYING","","files/req/redcarpet2/COPYING.html","","<p>Copyright © 2009, Natacha Porté Copyright © 2011, Vicent Marti\n<p>Permission to use, copy, modify, and …\n"],["Rakefile","","files/req/redcarpet2/Rakefile.html","","<p>require ‘date’ require ‘rake/clean’ require ‘rake/extensiontask’ require\n‘digest/md5’\n<p>task :default =&gt; …\n"],["LICENSE","","files/req/sqlite3/LICENSE.html","","<p>Copyright © 2004, Jamis Buck (jamis@jamisbuck.org) All rights reserved.\n<p>Redistribution and use in source …\n"],["gemspec","","files/req/sqlite3/gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name = %q{sqlite3-ruby}\ns.version = &quot;1.3.0&quot;\n#s.platform = %q{x86-mswin32-60} ...</pre>\n"],["PKGBUILD","","files/static/PKGBUILD.html","","<p># Original contributor: Michael Fellinger &lt;m.fellinger@gmail.com&gt; #\nUpdated by:  # Tapio Saarinen …\n"],["manual-en","","files/static/manual-en_txt.html","","<p>Hello! =\n<p>Shoes is a tiny graphics toolkit. It’s simple and straightforward. Shoes\nwas born to be easy! …\n"],["manual-ja","","files/static/manual-ja_txt.html","","<p>Hello! =\n<p>Shoesは軽量なグラフィックツールキットです。これは単純で分かりやすいです。Shoesは簡単になるように生まれました。本当に、これは全くの初心者のために作られました。本当に簡単です。\n…\n"],["sh-install","","files/static/stubs/sh-install.html","","<p>#!/bin/sh shoes_host=“shoes.heroku.com”\nshoes_url=“$shoes_host/pkg/policeman/linux/shoes-novideo …\n"]]}}