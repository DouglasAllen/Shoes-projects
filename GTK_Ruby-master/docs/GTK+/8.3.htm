<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html><head>


  <title>Hello World in Ruby-GNOME2</title>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="GENERATOR" content="Quanta Plus">
  <link rel="stylesheet" type="text/css" href="site-style.css">
</head><body>
<h1>8.3. Adjustment Internals</h1>

<p>Ok, you say, that's nice, but what if I want to create my own handlers to respond when the user adjusts a range widget 
or a spin button, and how do I get at the value of the adjustment in these handlers? To answer these questions and more, 
let's start by taking a look at Gtk::Adjustment itself:</p>

<pre>Gtk::Adjustment.new( value, lower, upper, step_increment, page_increment, page_size )</pre>

<p>You can use the following accessor to inspect the value of an adjustment:</p>

<pre>Gtk::Adjustment#value( adjustment);</pre>

<p>Since, when you set the value of an Adjustment, you generally want the change to be reflected by every widget that
uses this adjustment, Ruby-GNOME2 provides this convenience method to do this:</p>

<pre>Gtk::Adjustment#set_value( ????? )</pre>

<p>As mentioned earlier, Adjustment is a subclass of Object just like all the various widgets, and thus it is able to 
emit signals. This is, of course, why updates happen automagically when you share an adjustment object between a 
scrollbar and another adjustable widget; all adjustable widgets connect signal handlers to their adjustment's 
value_changed signal, as can your program.</p>

<p>The various widgets that use the Adjustment object will emit this signal on an adjustment whenever they change its value. 
This happens both when user input causes the slider to move on a range widget, as well as when the program explicitly 
changes the value with Gtk::Adjustment#set_value or Gtk::Adjustment#value=. So, for example, if you have a scale widget, 
and you want to change the rotation of a picture whenever its value changes, you would create a callback like this:</p>

<pre>cb_rotate_picture ( adj, picture )
   set_picture_rotation ( picture, Gtk::Adjustment#value( adj ) )
...
</pre>

<p>and connect it to the scale widget's adjustment like this:</p>

<pre>adj.signal_connect ( "value_changed" ) { |adj| cb_rotate_picture( adj, picture ) }</pre>

<p>What about when a widget reconfigures the upper or lower fields of its adjustment, such as when a user adds more
text to a text widget? In this case, it emits the changed signal.</p>

<p>Range widgets typically connect a handler to this signal, which changes their appearance to reflect the change - 
for example, the size of the slider in a scrollbar will grow or shrink in inverse proportion to the difference between 
the lower and upper values of its adjustment.</p>

<p>You probably won't ever need to attach a handler to this signal, unless you're writing a new type of range widget. 
However, if you change any of the values in a Adjustment directly, you should emit this signal on it to reconfigure 
whatever widgets are using it, like this:</p>

<pre>adjustment#signal_emit_by_name( "changed" )</pre>

<p>Now go forth and adjust!</p>

<hr>
<table>
   <tbody><tr>
      <td align="left"><a href="8.2.htm">Prev</a></td>
      <td align="right"><a href="9.0.htm">Next</a></td>
   </tr>
</tbody></table>
</body></html>
