<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html><head>


  <title>Getting Started</title>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="GENERATOR" content="Quanta Plus">
  <link rel="stylesheet" type="text/css" href="site-style.css">
</head><body>
<h1>5.2. Details of Boxes</h1>

<p>Because of this flexibility, packing boxes in GTK can confussing at first. There are a lot of options, and
it's not immediately obvious how they all fit together. In the end, however, there are five different 
styles</p>

<img src="5.2_files/packbox.htm" border="0" width="500" height="258">

<p>Each line contains one horizontal box(hbox) with several buttons. The call to Gtk::Box#pack_start is shorthand for the
call to pack each of the buttons into the hbox. Each of the buttons are packed into the hbox in the same way, i.e same
arguments to the Gtk::Box#pack_start method.</p>

<p>This is the declaration fo teh Gtk::Box#pack_start method.</p>

<pre>Gtk::Box#pack_start( child, expand, fill, padding )</pre>

<p>The first argument is the object you are packing into the box. The objects will all be buttons for now, so we'll be 
packing buttons into the boxes.</p>

<p>The <i>expand</i> argument to Gtk::Box#pack_start and Gtk::Box#pack_end controls whether the widgets are laid out in the
box to fill all the extra space in the box so the box is expanded to fill the area allotted to it (true); or the box is 
shrunk to just fit the widgets (false). Setting expand to false will allow you to do right and left justification of your
widgets. Otherwise, they will all expand to fit into the box, and the same effect could be achieved by using only the first
argument of Gtk::Box#pack_start or Gtk::Box#pack_end.</p>

<p>The <i>fill</i> argument to the Gtk::Box#pack methodscontrol whether the extra space is allocated to the objects
themselves (true), or as extra padding in the box around these objects (false). It only has an effect if the <i>expand</i>
argument is also true.</p>

<p>When creating a new box, the method looks like this:</p>

<pre>Gtk::HBox.new( homogeneous, spacing )
Gtk::VBox.new( homogeneous, spacing )
</pre>

<p>The <i>homogeneous</i> argument controls whether each object in the box has the same size (i.e. the same width in an hbox,
or the same height in a vbox). If it is set, the pack methods function essentially as if the <i>expand</i> argument was
always turned on.</p>

<p>What's the difference between spacing (set when box is created) and padding (set when elements are packed)? Spacing
is added between objects, and padding is added on either side of an object. The following figure should make it clearer:</p>

<img src="5.2_files/packbox2.htm" border="0" width="425" height="232">

<p>The code used to create the images on this page, is avialable on the next page.</p>

<img src="5.2_files/packbox3.htm" border="0" width="432" height="113">

<p>Run the program by doing "ruby packbox.rb num", where num is a number between 1 and 3.</p> 

<hr>
<table>
	<tbody><tr>
		<td align="left"><a href="5.1.htm">Prev</a></td>
		<td align="right"><a href="5.3.htm">Next</a></td>
	</tr>
</tbody></table>
</body></html>
