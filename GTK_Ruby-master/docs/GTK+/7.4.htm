<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html><head>


  <title>Hello World in Ruby-GNOME2</title>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="GENERATOR" content="Quanta Plus">
  <link rel="stylesheet" type="text/css" href="site-style.css">
</head><body>
<h1>7.4. Radio Buttons</h1>

<p>Radio buttons are similar to check buttons except they are grouped so that only one may be selected/depressed at a time.
This is good for places in your application where you need to select from a short list of options.</p>

<p>Creating a new radio button is done with one of these calls:</p>

<pre>Gtk::RadioButton.new
Gtk::RadioButton.new( label, use_underline )
Gtk::RadioButton.new( stockitem )
Gtk::RadioButton.new( label )
Gtk::RadioButton.new( group, label, use_underline )
Gtk::RadioButton.new( group, stockitem )
</pre>

<p>You'll notice the argument to these calls. They require a group to perform thier duty properly. You can add a radio
button to a group in a couple of different ways. Look at the example code given below for the various ways to do it. You
will also notice the arguments <i>stockitem</i> and <i>use_underline</i>. The first argument is used to create a stock
image and text that is built into GTK itself, and it accepts a <a href="">Gtk::Stock item</a>. The second argument is
<i>use_underline</i>, which sets up a mnemonic </p>

<!--<pre>Gtk::Stock::ADD
Gtk::Stock::APPLY
Gtk::Stock::BOLD
Gtk::Stock::CANCEL
Gtk::Stock::CDROM
Gtk::Stock::CLEAR
Gtk::Stock::CLOSE
Gtk::Stock::CONVERT
Gtk::Stock::COPY
Gtk::Stock::CUT
Gtk::Stock::DELETE
Gtk::Stock::DIALOG_ERROR
Gtk::Stock::DIALOG_INFO
Gtk::Stock::DIALOG_QUESTION
Gtk::Stock::DIALOG_WARNING
Gtk::Stock::DND
Gtk::Stock::DND_MULTIPLE
Gtk::Stock::EXECUTE
Gtk::Stock::FIND
Gtk::Stock::FIND_AND_REPLACE
Gtk::Stock::FLOPPY
Gtk::Stock::GOTO_BOTTOM
Gtk::Stock::GOTO_FIRST
Gtk::Stock::GOTO_TOP
Gtk::Stock::GO_BACK
Gtk::Stock::GO_DOWN
Gtk::Stock::GO_FORWARD
Gtk::Stock::GO_UP
Gtk::Stock::HELP
Gtk::Stock::HOME
Gtk::Stock::INDEX
Gtk::Stock::ITALIC
Gtk::Stock::INDEX
Gtk::Stock::JUMP_TO
Gtk::Stock::JUSTIFY_CENTER
Gtk::Stock::JUSTIFY_FILL
Gtk::Stock::JUSTIFY_LEFT
Gtk::Stock::JUSTIFY_RIGHT
Gtk::Stock::MISSING_IMAGE
Gtk::Stock::NEW
Gtk::Stock::NO
Gtk::Stock::OK
Gtk::Stock::OPEN
Gtk::Stock::PASTE
Gtk::Stock::PREFERENCES
Gtk::Stock::PRINT
Gtk::Stock::PRINT_PREVIEW
Gtk::Stock::PROPERTIES
Gtk::Stock::QUIT
Gtk::Stock::REDO
Gtk::Stock::REFRESH
Gtk::Stock::REMOVE
Gtk::Stock::REVERT_TO_SAVED
Gtk::Stock::SAVE
Gtk::Stock::SAVE_AS
Gtk::Stock::SELECT_COLOR
Gtk::Stock::SELECT_FONT
Gtk::Stock::SORT_ASCENDING
Gtk::Stock::SORT_DESCENDING
Gtk::Stock::SPELL_CHECK
Gtk::Stock::STOP
Gtk::Stock::STRIKETRHOUGH
Gtk::Stock::UNDELETE
Gtk::Stock::UNDERLINE
Gtk::Stock::UNDO
Gtk::Stock::YES
Gtk::Stock::ZOOM_100
Gtk::Stock::ZOOM_FIT
Gtk::Stock::ZOOM_IN
Gtk::Stock::ZOOM_OUT
</pre>-->

<p>The important thing to remember is to add each new button to the group, with the primary (first) button passed as the
argument. This allows a chain of buttons to be established. The example below should make this clear.</p>

<img src="images/radiobuttons.png" border="0" width="112" height="195">

<pre>require 'gtk2'

def close_application( widget, event )
   Gtk.main_quit
   return false
end

Gtk.init
window = Gtk::Window.new( Gtk::Window::TOPLEVEL )
window.signal_connect( "delete_event" ) { |w,e| close_application( w, e ) }
window.title=( "Radio Buttons" )
window.border_width=( 0 )

box1 = Gtk::VBox.new( false, 0 )
window.add( box1 )

box2 = Gtk::VBox.new( false, 10 )
box2.border_width=( 10 )
box1.pack_start( box2, true, true, 0 )

# A normal radio button
button = Gtk::RadioButton.new( "Button1" )
box2.pack_start( button, true, true, 0 )

# Use underline
button = Gtk::RadioButton.new( button, "_Button2", true )
button.active=( true )
box2.pack_start( button, true, true, 0 )

# Don;t use underline
button = Gtk::RadioButton.new( button, "_Button3", false )
box2.pack_start( button, true, true, 0 )

# Use a stock item
button = Gtk::RadioButton.new( button, Gtk::Stock::YES )
box2.pack_start( button, true, true, 0 )

separator = Gtk::HSeparator.new
box1.pack_start( separator, false, true, 0 )

button = Gtk::Button.new( Gtk::Stock::QUIT )
button.signal_connect( "clicked" ) { |w| close_application( w, nil ) }
box1.pack_start( button, true, true, 0 )
button.can_default=( true )
button.grab_default

window.show_all
Gtk.main
</pre>

<hr>
<table>
   <tbody><tr>
      <td align="left"><a href="7.3.htm">Prev</a></td>
      <td align="right"><a href="8.0.htm">Next</a></td>
   </tr>
</tbody></table>
</body></html>
