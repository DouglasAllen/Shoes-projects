<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html><head>


  <title>Hello World in Ruby-GNOME2</title>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="GENERATOR" content="Quanta Plus">
  <link rel="stylesheet" type="text/css" href="site-style.css">
</head><body>
<h1>10.10. Combo Box</h1>

<p>The combo box is another fairly simple widget that is really just a collection of other widgets. 
From the user's point of view, the widget consists of a text entry box and a pull down menu from which 
the user can select one of a set of predefined entries. Alternatively, the user can type a different 
option directly into the text box.</p>

<p>The Combo Box has two principal parts that you really care about: an entry and a list.</p>

<p>First off, to create a combo box, use:</p>

<pre>Gtk::Combo.new</pre>

<p>Now, if you want to set the string in the entry section of the combo box, this is done by
manipulating the entry widget directly:</p>

<pre>Gtk::Combo#entry#text=( "entry_text")</pre>

<p>To set the values in the popdown list, one uses theses methods:</p>

<pre>Gtk::Combo#set_popdown_strings( strings )
Gtk::Combo#popdown_strings=( strings )
</pre>

<p>Before you can do this, you have to assemble an array of the strings that you want.</p>

<p>Here's a typical code segment for creating a set of options:</p>

<pre>list = [
   "String 1",
   "String 2",
   "String 3",
   "String 4"
]

Gtk::Combo.popdown_strings=( list )
</pre>

<p>At this point you have a working combo box that has been set up. There are a few aspects of its
behavior that you can change. These are accomplished with the methods:</p>

<pre>Gtk::Combo#set_use_arrows( val )
Gtk::Combo#use_arrows=( val )

Gtk::Combo#set_use_arrows_always( val )
Gtk::Combo#use_arrows_always=( val )

Gtk::Combo#set_case_sensitive( val )
Gtk::Combo#case_sensitive=( val )
</pre>

<p>Gtk::Combo#set_use_arrows lets the user change the value in the entry using the up/down arrow keys.
This doesn't bring up the list, but rather replaces the current text in the entry with the next list 
entry (up or down, as your key choice indicates). It does this by searching in the list for the item 
corresponding to the current value in the entry and selecting the previous/next item accordingly. 
Usually in an entry the arrow keys are used to change focus (you can do that anyway using TAB). Note 
that when the current item is the last of the list and you press arrow-down it changes the focus (the 
same applies with the first item and arrow-up). The argument <i>val</i> accepts a boolean true or false.</p>

<p>If the current value in the entry is not in the list, then the method of Gtk::Combo#set_use_arrows
is disabled.</p>

<p>Gtk::Combo#set_use_arrows_always similarly allows the use the the up/down arrow keys to cycle through
the choices in the dropdown list, except that it wraps around the values in the list, completely disabling
the use of the up and down arrow keys for changing focus.</p>

<p>Gtk::Combo#set_case_sensitive toggles whether or not GTK searches for entries in a case sensitive
manner. This is used when the Combo widget is asked to find a value from the list using the current entry
in the text box. This completion can be performed in either a case sensitive or insensitive manner, depending
upon the use of this function. The Combo widget can also simply complete the current entry if the user presses
the key combination MOD-1 and "Tab". MOD-1 is often mapped to the "Alt" key, by the xmodmap utility. Note,
however that some window managers also use this key combination, which will override its use within GTK.</p>

<p>Now that we have a combo box, tailored to look and act how we want it, all that remains is being able to
get data from the combo box. This is relatively straightforward. The majority of the time, all you are going
to care about getting data from is the entry. The entry is accessed simply by Gtk::Combo.entry.text.
The two principal things that you are going to want to do with it are connect to the activate signal, which
indicates that the user has pressed the Return or Enter key, and read the text. The first is accomplished using
something like:</p>

<pre>Gtk::Combo#entry#signal_connect( "activate" ) { callback_method }</pre>

<p>Getting the text at any arbitrary time is accomplished by simply using the entry method:</p>

<pre>Gtk::Combo#entry#text</pre>

<p>That's about all there is to it.</p>

<hr>
<table>
	<tbody><tr>
		<td align="left"><a href="10.9.htm">Prev</a></td>
		<td align="right"><a href="10.11.htm">Next</a></td>
	</tr>
</tbody></table>
</body></html>
