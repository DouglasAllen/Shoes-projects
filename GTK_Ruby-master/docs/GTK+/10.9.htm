<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html><head>


  <title>Hello World in Ruby-GNOME2</title>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="GENERATOR" content="Quanta Plus">
  <link rel="stylesheet" type="text/css" href="site-style.css">
</head><body>
<h1>10.9. Spin Buttons</h1>

<p>The Spin Button widget is generally used to allow the user to select a value from a range of numeric values. 
It consists of a text entry box with up and down arrow buttons attached to the side. Selecting one of the buttons 
causes the value to "spin" up and down the range of possible values. The entry box may also be edited directly 
to enter a specific value.</p>

<p>The Spin Button allows the value to have zero or a number of decimal places and to be incremented/decremented 
in configurable steps. The action of holding down one of the buttons optionally results in an acceleration of 
change in the value according to how long it is depressed.</p>

<p>The Spin Button uses an Adjustment object to hold information about the range of values that the spin button can 
take. This makes for a powerful Spin Button widget.</p>

<p>Recall that an adjustment widget is created with the following method, which illustrates the information 
that it holds:</p>

<pre>Gtk::Adjustment.new( value, lower, upper, step_increment, page_increment, page_size )</pre>

<p>These attributes of an Adjustment are used by the Spin Button in the following way:</p>

<ul>
	<li><i>value</i>: initial value for the Spin Button</li>
	<li><i>lower</i>: lower range value</li>
	<li><i>upper</i>: upper range value</li>
	<li><i>step_increment</i>: value to increment/decrement when pressing mouse
	button 1 on a button</li>
	<li><i>page_increment</i>: value to increment/decrement when pressing mouse
	button 2 on a button</li>
	<li><i>page_size</i>: unused</li>
</ul>

<p>Additionally, mouse button 3 can be used to jump directly to the upper or lower values when used to 
select one of the buttons. Lets look at how to create a Spin Button:</p>

<pre>Gtk::SpinButton.new( Gtk:Adjustment, climb_rate, digits )</pre>

<p>The climb_rate argument takes a value between 0.0 and 1.0 and indicates the amount of acceleration
that the Spin Button has. The digits argument specifies the number of decimal places to which the
value will be displayed.</p>

<p>A Spin Button can be reconfigured after creation using the following method:</p>

<pre>Gtk::SpinButton#configure( Gtk::Adjustment, climb_rate, digits )</pre>

<p>The arguments are as specified above.</p>

<p>The adjustment can be set and retrieved independantly using the following methods:</p>

<pre># Syntax sugar again
Gtk::SpinButton#set_adjustment( Gtk::Adjustment )
Gtk::SpinButton#adjustment=( Gtk::Adjustment )

Gtk::SpinButton#adjustment
</pre>

<p>The number of decimal places can also be altered using:</p>

<pre>Gtk::SpinButton#set_digits( digits )
Gtk::SpinButtons#digits=( digits )
</pre>

<p>The value that a Spin Button is currently displaying can be changed using the following method:</p>

<pre>Gtk::SpinButton#set_value( value )
Gtk::SpinButton#value=( value )
</pre>

<p>The current value of a Spin Button can be retrieved with the following method:</p>

<pre>Gtk::SpinButton#value</pre>

<p>If you want to alter the value of a Spin Button relative to its current value, then the following
method can be used:</p>

<pre>Gtk::SpinButton#spin( direction, increment )</pre>

<p>The <i>direction</i> parameter can take one of the following values:</p>

<pre>  Gtk::SpinButton::STEP_FORWARD
  Gtk::SpinButton::STEP_BACKWARD
  Gtk::SpinButton::PAGE_FORWARD
  Gtk::SpinButton::PAGE_BACKWARD
  Gtk::SpinButton::HOME
  Gtk::SpinButton::END
  Gtk::SpinButton::USER_DEFINED
</pre>

<p>This method packs in quite a bit of methodality, which I will attempt to clearly explain. 
Many of these settings use values from the Adjustment object that is associated with a Spin Button.</p>

<p><i>Gtk::SpinButton::STEP_FORWARD</i> and <i>Gtk::SpinButton::STEP_BACKWARD</i> change the value of the Spin Button
by the amount specified by increment, unless increment is equal to 0, in which case the value is changed
by the value of <i>step_increment</i> in the Adjustment.</p>

<p><i>Gtk::Spin::PAGE_FORWARD</i> and <i>Gtk::Spin::PAGE_BACKWARD</i> simply alter the value of the Spin Button 
by increment.</p>

<p><i>Gtk::Spin::HOME</i> sets the value of the Spin Button to the bottom of the Adjustments range.</p>

<p><i>Gtk::Spin::END</i> sets the value of the Spin Button to the top of the Adjustments range.</p>

<p><i>Gtk::Spin::USER_DEFINED</i> simply alters the value of the Spin Button by the specified amount.</p>

<p>We move away from methods for setting and retreving the range attributes of the Spin Button now, 
and move onto methods that effect the appearance and behaviour of the Spin Button widget itself.</p>

<p>The first of these methods is used to constrain the text box of the Spin Button such that 
it may only contain a numeric value. This prevents a user from typing anything other than numeric 
values into the text box of a Spin Button:</p>

<pre>Gtk::SpinButton#set_numeric( numeric )
Gtk::SpinButton#numeric=( numeric )
</pre>

<p>You can set whether a Spin Button will wrap around between the upper and lower range 
values with the following methods:</p>

<pre>Gtk::SpinButton#set_wrap( wrap )
Gtk::SpinButton#wrap=( wrap )
</pre>

<p>You can set a Spin Button to round the value to the nearest step_increment, which is set
within the Adjustment object used with the Spin Button. This is accomplished with the following
methods:</p>

<pre>Gtk::SpinButton#set_snap_to_ticks( snap_to_ticks )
Gtk::SpinButton#snap_to_ticks=( snap_to_ticks )
</pre>

<p>The update policy of a Spin Button can be changed with the following method:</p>

<pre>Gtk::SpinButton#set_update_policy( policy )
Gtk::SpinButton#update_policy=( policy )
</pre>

<p>The possible values of policy are either Gtk::UPDATE_ALWAYS or Gtk::UPDATE_IF_VALID.</p>

<p>These policies affect the behavior of a Spin Button when parsing inserted text and syncing its value with 
the values of the Adjustment.</p>

<p>In the case of Gtk::UPDATE_IF_VALID the Spin Button only value gets changed if the text input is a numeric 
value that is within the range specified by the Adjustment. Otherwise the text is reset to the current value.</p>

<p>In case of Gtk::UPDATE_ALWAYS we ignore errors while converting text into a numeric value.</p>

<p>Finally, you can explicitly request that a Spin Button update itself:</p>

<pre>Gtk::SpinButton#update</pre>

<p>It's example time again.</p>

<p>INSERT SPIN BUTTON SCREENSHOT HERE</p>

<pre>CODE
CODE
CODE
CODE
CODE
CODE
CODE
</pre>

<hr>
<table>
   <tbody><tr>
      <td align="left"><a href="10.8.htm">Prev</a></td>
      <td align="right"><a href="10.10.htm">Next</a></td>
   </tr>
</tbody></table>
</body></html>
